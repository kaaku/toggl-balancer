{"version":3,"sources":["bootstrap.js","serviceWorker.js","ApiTokenDialog.jsx","Duration.jsx","MonthView.jsx","CalendarGrid.jsx","DateRangeSelector.jsx","TimeEntryStore.jsx","RunningEntryIndicator.jsx","App.jsx","index.jsx"],"names":["install","Boolean","window","location","hostname","match","ApiTokenDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","apiToken","rememberMe","handleChange","bind","assertThisInitialized","handleClose","event","setState","target","value","onClose","_this$state","_this2","_this$props","open","mandatory","_this$state2","react_default","a","createElement","Dialog_default","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","href","rel","Icon_default","fontSize","TextField_default","autoFocus","fullWidth","margin","label","onChange","FormControlLabel_default","control","Checkbox_default","color","checked","e","DialogActions_default","Button_default","onClick","disabled","Component","defaultProps","withStyles","withTheme","Duration","duration","useColors","textProps","sign","durationObj","moment","Math","abs","durationFormatted","concat","floor","asHours","minutes","toString","padStart","Typography_default","theme","calendarCell","padding","height","backgroundColor","palette","grey","year","month","data","defaultContent","classes","firstDayOfMonth","day","firstVisibleDay","startOf","lastDayOfMonth","endOf","lastVisibleDay","dates","weeks","gridCellCount","round","diff","asDays","length","push","add","format","splice","Fragment","map","week","Grid_default","container","spacing","key","date","item","xs","Paper_default","className","classNames","defineProperty","variant","gutterBottom","getTimeEntriesForMonth","timeEntriesByDate","keys","filter","reduce","result","assign","getMonthViewData","apply","toConsumableArray","src_Duration","align","root","unit","startDate","endDate","isAfter","dataByMonth","isBefore","timeEntriesForMonth","totalDiff","values","monthViewData","justify","_ref2","lg","src_MonthView","quickSelections","title","getDateRange","subtract","default","src_DateRangeSelector","marginTop","currentYear","material_ui_pickers_esm","maxDate","autoOk","showTodayButton","minDate","selection","size","defaultDateRange","find","workDayDuration","asSeconds","groupEntries","timeEntries","entry","start","end","unix","isRunning","sort","b","dataForDate","hasRunningEntry","TimeEntryStore","Error","isValid","url","URL","params","start_date","toISOString","end_date","search","URLSearchParams","fetch","method","headers","Headers","Authorization","btoa","Content-Type","then","res","json","RunningEntryIndicator","visible","Tooltip_default","placement","red","marginLeft","verticalAlign","animation","App","_localStorage","localStorage","dateRange","handleDialogClose","handleDateRangeChange","updateTimeEntries","prevProps","prevState","error","setItem","forEach","_this$state3","src_ApiTokenDialog","totalTimeDiff","sum","isTrackingOngoing","some","dateSelectorContainer","isSame","Typography","inline","src_RunningEntryIndicator","src_CalendarGrid","createMuiTheme","typography","useNextVariants","ReactDOM","render","index_es","CssBaseline_default","utils","MomentUtils","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a615a7d.chunk.js","sourcesContent":["import { install } from '@material-ui/styles';\r\n\r\ninstall();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nclass ApiTokenDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiToken: '',\r\n      rememberMe: true\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ apiToken: event.target.value });\r\n  }\r\n\r\n  handleClose() {\r\n    const { onClose } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n    onClose(apiToken, rememberMe);\r\n  }\r\n\r\n  render() {\r\n    const { open, mandatory } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        disableBackdropClick={mandatory}\r\n        disableEscapeKeyDown={mandatory}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Enter your Toggl API Token</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Your Toggl time entries will be fetched using your API Token, which you can find from your{' '}\r\n            <a href=\"https://www.toggl.com/app/profile\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Toggl profile <Icon fontSize=\"small\">open_in_new</Icon>\r\n            </a>\r\n          </DialogContentText>\r\n          <TextField autoFocus fullWidth margin=\"dense\" label=\"API Token\" onChange={this.handleChange} />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                checked={rememberMe}\r\n                onChange={(e, checked) => this.setState({ rememberMe: checked })}\r\n              />\r\n            }\r\n            label=\"Remember me\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button color=\"primary\" onClick={this.handleClose} disabled={!mandatory || !apiToken}>\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nApiTokenDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  mandatory: PropTypes.bool\r\n};\r\n\r\nApiTokenDialog.defaultProps = {\r\n  mandatory: false\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(ApiTokenDialog);\r\n","import moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst Duration = props => {\r\n  const { duration, useColors, textProps } = props;\r\n\r\n  const sign = duration === 0 ? '' : duration > 0 ? '+' : '-';\r\n  const durationObj = moment.duration(Math.abs(duration), 'seconds');\r\n  const durationFormatted = `${Math.floor(durationObj.asHours())}:${durationObj\r\n    .minutes()\r\n    .toString()\r\n    .padStart(2, '0')}`;\r\n  if (useColors) {\r\n    textProps.color = duration < 0 ? 'error' : 'primary';\r\n  }\r\n\r\n  return (\r\n    <Typography {...textProps}>\r\n      {sign}\r\n      {durationFormatted}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nDuration.propTypes = {\r\n  duration: PropTypes.number.isRequired,\r\n  useColors: PropTypes.bool,\r\n  textProps: PropTypes.object\r\n};\r\n\r\nDuration.defaultProps = {\r\n  useColors: false,\r\n  textProps: {}\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(Duration);\r\n","import classNames from 'classnames';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  calendarCell: {\r\n    padding: 10,\r\n    height: '100%'\r\n  },\r\n  disabled: {\r\n    backgroundColor: theme.palette.grey[200]\r\n  }\r\n});\r\n\r\nconst MonthView = props => {\r\n  const { year, month, data, defaultContent, classes } = props;\r\n\r\n  const firstDayOfMonth = moment({ year, month: month - 1, day: 1 });\r\n  const firstVisibleDay = moment(firstDayOfMonth).startOf('week');\r\n  const lastDayOfMonth = moment(firstDayOfMonth)\r\n    .endOf('month')\r\n    .startOf('day');\r\n  const lastVisibleDay = moment(lastDayOfMonth)\r\n    .endOf('week')\r\n    .startOf('day');\r\n\r\n  const dates = [];\r\n  const weeks = [];\r\n  const gridCellCount = Math.round(moment.duration(lastVisibleDay.diff(firstVisibleDay)).asDays()) + 1;\r\n  while (dates.length < gridCellCount) {\r\n    dates.push(\r\n      moment(firstVisibleDay)\r\n        .add(dates.length, 'days')\r\n        .format('YYYY-MM-DD')\r\n    );\r\n  }\r\n  while (dates.length > 0) {\r\n    weeks.push(dates.splice(0, 7));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {weeks.map(week => (\r\n        <Grid container spacing={16} key={moment(week[0]).week()}>\r\n          {week.map(date => (\r\n            <Grid item xs key={date}>\r\n              <Paper\r\n                className={classNames(classes.calendarCell, { [classes.disabled]: moment(date).month() + 1 !== month })}\r\n              >\r\n                <Typography variant=\"overline\" gutterBottom>\r\n                  {moment(date).format('DD')}\r\n                </Typography>\r\n                {data[date] && data[date]}\r\n                {!data[date] && moment(date).month() + 1 === month && defaultContent}\r\n              </Paper>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nMonthView.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  month: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).isRequired,\r\n  data: PropTypes.shape({\r\n    date: PropTypes.element\r\n  }).isRequired,\r\n  defaultContent: PropTypes.element\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(MonthView);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Duration from './Duration';\r\nimport MonthView from './MonthView';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 10\r\n  }\r\n});\r\n\r\nfunction getTimeEntriesForMonth(timeEntriesByDate, month) {\r\n  return Object.keys(timeEntriesByDate)\r\n    .filter(date => moment(date).month() === month)\r\n    .reduce((result, date) => Object.assign(result, { [date]: timeEntriesByDate[date] }), {});\r\n}\r\n\r\nfunction toCalendarCellComponent(data) {\r\n  return (\r\n    <Duration\r\n      duration={data.duration}\r\n      useColors\r\n      textProps={{\r\n        variant: 'h6',\r\n        align: 'center'\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * @param timeEntriesByDate {Object}\r\n */\r\nfunction getMonthViewData(timeEntriesByDate) {\r\n  return Object.assign(\r\n    {},\r\n    ...Object.keys(timeEntriesByDate).map(date => ({ [date]: toCalendarCellComponent(timeEntriesByDate[date]) }))\r\n  );\r\n}\r\n\r\nfunction getDefaultCellContent() {\r\n  return (\r\n    <Typography variant=\"h6\" color=\"textSecondary\" align=\"center\">\r\n      -\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst CalendarGrid = props => {\r\n  const { startDate, endDate, timeEntriesByDate, classes } = props;\r\n  if (startDate.isAfter(endDate)) {\r\n    return;\r\n  }\r\n\r\n  const dataByMonth = [];\r\n  let firstDayOfMonth = moment(startDate).startOf('month');\r\n  while (firstDayOfMonth.isBefore(endDate)) {\r\n    const timeEntriesForMonth = getTimeEntriesForMonth(timeEntriesByDate, firstDayOfMonth.month());\r\n    dataByMonth.push({\r\n      firstDayOfMonth,\r\n      totalDiff: Object.values(timeEntriesForMonth).reduce((result, data) => result + data.duration, 0),\r\n      monthViewData: getMonthViewData(timeEntriesForMonth)\r\n    });\r\n    firstDayOfMonth = moment(firstDayOfMonth).add(1, 'month');\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"center\" spacing={40} className={classes.root}>\r\n      {dataByMonth.map(({ firstDayOfMonth, totalDiff, monthViewData }) => (\r\n        <Grid item xs={12} lg={6} key={firstDayOfMonth.format('YYYY-MM')}>\r\n          <Grid container justify=\"space-between\">\r\n            <Grid item>\r\n              <Typography variant=\"h2\" gutterBottom>\r\n                {firstDayOfMonth.format('MMMM YYYY')}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Duration\r\n                duration={totalDiff}\r\n                useColors\r\n                textProps={{\r\n                  variant: 'h2',\r\n                  gutterBottom: true\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <MonthView\r\n            year={firstDayOfMonth.year()}\r\n            month={firstDayOfMonth.month() + 1}\r\n            data={monthViewData}\r\n            defaultContent={getDefaultCellContent()}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCalendarGrid.propTypes = {\r\n  startDate: PropTypes.instanceOf(moment).isRequired,\r\n  endDate: PropTypes.instanceOf(moment).isRequired,\r\n  timeEntriesByDate: PropTypes.object.isRequired,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CalendarGrid);\r\n","import Button from '@material-ui/core/Button';\r\nimport { DatePicker } from 'material-ui-pickers';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 5\r\n  },\r\n  quickSelections: {\r\n    marginTop: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nconst quickSelections = [\r\n  {\r\n    title: 'Last month',\r\n    getDateRange: () => ({\r\n      startDate: moment()\r\n        .subtract(1, 'month')\r\n        .startOf('month'),\r\n      endDate: moment()\r\n        .startOf('month')\r\n        .subtract(1, 'day')\r\n    })\r\n  },\r\n  {\r\n    title: 'This month',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('month'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    }),\r\n    default: true\r\n  },\r\n  {\r\n    title: 'This year',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('year'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    })\r\n  }\r\n];\r\n\r\nconst DateRangeSelector = props => {\r\n  const { startDate, endDate, onChange, classes } = props;\r\n  const currentYear = moment().year();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Grid container justify=\"space-evenly\" spacing={40}>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"From\"\r\n            format={startDate && startDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={startDate}\r\n            maxDate={endDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate: date,\r\n                endDate\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"To\"\r\n            format={endDate && endDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={endDate}\r\n            minDate={startDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate,\r\n                endDate: date\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"space-evenly\" spacing={40} className={classes.quickSelections}>\r\n        {quickSelections.map(selection => (\r\n          <Grid item key={selection.title}>\r\n            <Button onClick={() => onChange(selection.getDateRange())} size=\"small\">\r\n              {selection.title}\r\n            </Button>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nDateRangeSelector.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  startDate: PropTypes.instanceOf(moment),\r\n  endDate: PropTypes.instanceOf(moment)\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(DateRangeSelector);\r\n\r\nexport const defaultDateRange = quickSelections.find(selection => selection.default).getDateRange();\r\n","import moment from 'moment';\r\n\r\nconst BASE_URL = 'https://www.toggl.com/api/v8/time_entries';\r\n\r\nconst workDayDuration = moment.duration('7:30').asSeconds();\r\n\r\nfunction groupEntries(timeEntries) {\r\n  return timeEntries\r\n    .map(entry =>\r\n      Object.assign(entry, {\r\n        start: moment(entry.start),\r\n        end: moment(entry.end),\r\n        duration: entry.duration < 0 ? moment().unix() + entry.duration : entry.duration,\r\n        isRunning: entry.duration < 0\r\n      })\r\n    )\r\n    .sort((a, b) => a.start.diff(b.start))\r\n    .reduce((result, entry) => {\r\n      const date = moment(entry.start).format('YYYY-MM-DD');\r\n      const dataForDate = result[date] || { timeEntries: [], duration: -workDayDuration, hasRunningEntry: false };\r\n      dataForDate.timeEntries.push(entry);\r\n      dataForDate.duration += entry.duration;\r\n      dataForDate.hasRunningEntry = dataForDate.hasRunningEntry || entry.isRunning;\r\n\r\n      return Object.assign(result, { [date]: dataForDate });\r\n    }, {});\r\n}\r\n\r\nexport default {\r\n  fetchTimeEntries(startDate, endDate, apiToken) {\r\n    if (!startDate && !endDate) {\r\n      throw Error('Either start date or end date is required');\r\n    } else if (!apiToken) {\r\n      throw Error('API token is required');\r\n    }\r\n\r\n    const start = !startDate ? null : moment(startDate).startOf('day');\r\n    const end = !endDate ? null : moment(endDate).add(1, 'day').startOf('day');\r\n    if ((start && !start.isValid()) || (end && !end.isValid())) {\r\n      throw Error('Start date and/or end date were invalid');\r\n    }\r\n\r\n    const url = new URL(BASE_URL);\r\n    const params = {};\r\n    if (start) {\r\n      params.start_date = start.toISOString();\r\n    }\r\n    if (end) {\r\n      params.end_date = end.toISOString();\r\n    }\r\n    url.search = new URLSearchParams(params);\r\n\r\n    return fetch(url, {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        Authorization: `Basic ${btoa(`${apiToken}:api_token`)}`,\r\n        'Content-Type': 'application/json'\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(groupEntries);\r\n  }\r\n};\r\n","import Icon from '@material-ui/core/Icon';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    color: red[500],\r\n    marginLeft: theme.spacing.unit * 2,\r\n    verticalAlign: 'top',\r\n    animation: 'blinker 2s cubic-bezier(0.46, 0.03, 0.52, 0.96) infinite'\r\n  }\r\n});\r\n\r\nconst RunningEntryIndicator = props => {\r\n  const { size, visible, classes } = props;\r\n  return visible ? (\r\n    <Tooltip title=\"You have a running time entry\" placement=\"top\">\r\n      <Icon fontSize={size} className={classes.root}>\r\n        fiber_manual_record\r\n      </Icon>\r\n    </Tooltip>\r\n  ) : null;\r\n};\r\n\r\nRunningEntryIndicator.propTypes = {\r\n  size: PropTypes.oneOf(['default', 'small', 'large']),\r\n  visible: PropTypes.bool\r\n};\r\n\r\nRunningEntryIndicator.defaultProps = {\r\n  size: 'default',\r\n  visible: true\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(RunningEntryIndicator);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport Typography from '@material-ui/core/es/Typography/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ApiTokenDialog from './ApiTokenDialog';\r\nimport CalendarGrid from './CalendarGrid';\r\nimport DateRangeSelector, { defaultDateRange } from './DateRangeSelector';\r\nimport TimeEntryStore from './TimeEntryStore';\r\nimport Duration from './Duration';\r\nimport RunningEntryIndicator from './RunningEntryIndicator';\r\nimport './styles.css';\r\n\r\nconst styles = theme => ({\r\n  dateSelectorContainer: {\r\n    marginTop: theme.spacing.unit * 5\r\n  },\r\n  totalTimeDiff: {\r\n    marginTop: theme.spacing.unit * 3\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { apiToken, startDate, endDate } = localStorage;\r\n    const dateRange =\r\n      startDate && endDate ? { startDate: moment(startDate), endDate: moment(endDate) } : defaultDateRange;\r\n    this.state = Object.assign({ apiToken, timeEntriesByDate: {} }, dateRange);\r\n\r\n    this.handleDialogClose = this.handleDialogClose.bind(this);\r\n    this.handleDateRangeChange = this.handleDateRangeChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { apiToken } = this.state;\r\n    if (apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { startDate, endDate, apiToken } = this.state;\r\n    if (prevState.startDate !== startDate || prevState.endDate !== endDate || prevState.apiToken !== apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  updateTimeEntries() {\r\n    const { startDate, endDate, apiToken } = this.state;\r\n    TimeEntryStore.fetchTimeEntries(startDate, endDate, apiToken).then(\r\n      result => this.setState({ timeEntriesByDate: result }),\r\n      error => this.setState({ error: error.toString() })\r\n    );\r\n  }\r\n\r\n  handleDialogClose(apiToken, rememberMe) {\r\n    if (rememberMe) {\r\n      localStorage.setItem('apiToken', apiToken);\r\n    }\r\n    this.setState({ apiToken });\r\n  }\r\n\r\n  handleDateRangeChange(dateRange) {\r\n    Object.keys(dateRange).forEach(key => localStorage.setItem(key, dateRange[key].format('YYYY-MM-DD')));\r\n    this.setState(dateRange);\r\n  }\r\n\r\n  render() {\r\n    const { startDate, endDate, apiToken, timeEntriesByDate, error } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    if (!apiToken) {\r\n      return <ApiTokenDialog open={!apiToken} mandatory={!apiToken} onClose={this.handleDialogClose} />;\r\n    }\r\n\r\n    const totalTimeDiff = Object.values(timeEntriesByDate).reduce((sum, entry) => sum + entry.duration, 0);\r\n    const isTrackingOngoing = Object.values(timeEntriesByDate).some(entry => entry.hasRunningEntry);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container justify=\"center\" className={classes.dateSelectorContainer}>\r\n          <Grid item>\r\n            <DateRangeSelector startDate={startDate} endDate={endDate} onChange={this.handleDateRangeChange} />\r\n          </Grid>\r\n          {!startDate.isSame(endDate, 'month') && (\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h2\" align=\"center\" className={classes.totalTimeDiff}>\r\n                Total: <Duration duration={totalTimeDiff} useColors textProps={{ variant: 'inherit', inline: true }} />\r\n                <RunningEntryIndicator size=\"large\" visible={isTrackingOngoing} />\r\n              </Typography>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n        {Object.keys(timeEntriesByDate).length > 0 && (\r\n          <CalendarGrid startDate={startDate} endDate={endDate} timeEntriesByDate={timeEntriesByDate} />\r\n        )}\r\n        {error && <div>{error}</div>}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(App);\r\n","import './bootstrap';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  }\r\n});\r\n\r\nconst root = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <App />\r\n    </MuiPickersUtilsProvider>\r\n  </ThemeProvider>\r\n);\r\n\r\nReactDOM.render(root(), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}