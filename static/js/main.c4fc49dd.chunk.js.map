{"version":3,"sources":["bootstrap.js","serviceWorker.js","ApiTokenDialog.jsx","Duration.jsx","RunningEntryIndicator.jsx","TimeEntryContext.jsx","TimeEntryStore.jsx","CalendarCell.jsx","CalendarGrid.jsx","CalendarGridContainer.jsx","DateRangeSelector.jsx","App.jsx","index.jsx"],"names":["install","Boolean","window","location","hostname","match","ApiTokenDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","apiToken","oldApiToken","rememberMe","handleChange","bind","assertThisInitialized","handleSubmit","handleCancel","event","setState","target","value","onClose","_this$state","_this2","_this$props","open","mandatory","_this$state2","react_default","a","createElement","Dialog_default","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","href","rel","Icon_default","fontSize","TextField_default","type","autoFocus","fullWidth","margin","label","onChange","FormControlLabel_default","control","Checkbox_default","color","checked","e","DialogActions_default","Button_default","onClick","variant","disabled","Component","defaultProps","withStyles","withTheme","Duration","duration","useColors","textProps","sign","durationObj","moment","Math","abs","durationFormatted","concat","floor","asHours","minutes","toString","padStart","Typography_default","RunningEntryIndicator","size","visible","classes","Tooltip_default","title","placement","className","root","theme","red","marginLeft","spacing","unit","verticalAlign","animation","TimeEntryContext","React","createContext","timeEntriesByDate","workdayOverrides","toggleWorkday","workdayDuration","asSeconds","timeEntryStore","fetchTimeEntries","startDate","endDate","workdaySettings","Error","start","startOf","end","add","isValid","url","URL","params","start_date","toISOString","end_date","search","URLSearchParams","fetch","method","headers","Headers","Authorization","btoa","Content-Type","catch","then","response","ok","json","status","timeEntries","map","entry","assign","unix","isRunning","sort","b","diff","reduce","result","date","format","dataForDate","isWorkday","hasRunningEntry","push","defineProperty","isBefore","dateString","hasOwnProperty","groupEntries","refreshDurations","arguments","length","undefined","refreshed","entries","forEach","_ref","_ref2","slicedToArray","hasTimeEntries","includes","isoWeekday","CalendarCell","isCurrentDate","isSame","hasDuration","Number","isSafeInteger","Consumer","Paper_default","classNames","calendarCell","inline","gutterBottom","dayOfMonth","today","src_RunningEntryIndicator","Switch_default","src_Duration","align","padding","height","backgroundColor","palette","action","disabledBackground","borderRadius","primary","main","contrastText","fontWeight","typography","fontWeightMedium","year","month","firstDayOfMonth","day","firstVisibleDay","lastDayOfMonth","endOf","lastVisibleDay","dates","weeks","gridCellCount","round","asDays","splice","durationData","fromDate","toDate","isSameOrBefore","getDurationData","Fragment","week","Grid_default","container","key","item","xs","src_CalendarCell","getTimeEntriesForMonth","keys","filter","isAfter","dataByMonth","timeEntriesForMonth","totalDiff","values","data","getDataByMonth","justify","lg","src_CalendarGrid","quickSelections","getDateRange","subtract","default","src_DateRangeSelector","marginTop","currentYear","material_ui_pickers_esm","maxDate","autoOk","showTodayButton","minDate","selection","defaultDateRange","find","App","_localStorage","localStorage","workdayOverridesString","JSON","parse","console","warn","dateRange","handleDialogClose","handleDateRangeChange","showApiTokenDialog","timeEntryContext","updateTimeEntries","prevProps","prevState","_this$state2$timeEntr","oldSetting","newWorkdayOverrides","refreshedTimeEntries","setItem","stringify","_this$state3","error","message","stateChange","removeItem","_this3","_this$state4","src_ApiTokenDialog","totalTimeDiff","sum","isTrackingOngoing","some","changeApiToken","dateSelectorContainer","Typography","SnackbarContent","errorNotification","Provider","src_CalendarGridContainer","position","top","right","locale","createMuiTheme","useNextVariants","ReactDOM","render","index_es","CssBaseline_default","utils","MomentUtils","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4fc49dd.chunk.js","sourcesContent":["import { install } from '@material-ui/styles';\r\n\r\ninstall();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nclass ApiTokenDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiToken: props.oldApiToken,\r\n      rememberMe: true\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ apiToken: event.target.value });\r\n  }\r\n\r\n  handleSubmit() {\r\n    const { onClose } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n    onClose({ apiToken, rememberMe });\r\n  }\r\n\r\n  handleCancel() {\r\n    const { onClose } = this.props;\r\n    onClose({});\r\n  }\r\n\r\n  render() {\r\n    const { open, mandatory } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        disableBackdropClick={mandatory}\r\n        disableEscapeKeyDown={mandatory}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Enter your Toggl API Token</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Your Toggl time entries will be fetched using your API Token, which you can find from your{' '}\r\n            <a href=\"https://www.toggl.com/app/profile\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Toggl profile <Icon fontSize=\"small\">open_in_new</Icon>\r\n            </a>\r\n          </DialogContentText>\r\n          <TextField\r\n            type=\"password\"\r\n            autoFocus\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"API Token\"\r\n            value={apiToken}\r\n            onChange={this.handleChange}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                checked={rememberMe}\r\n                onChange={(e, checked) => this.setState({ rememberMe: checked })}\r\n              />\r\n            }\r\n            label=\"Remember me\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {!mandatory && (\r\n            <Button color=\"primary\" onClick={this.handleCancel}>\r\n              Cancel\r\n            </Button>\r\n          )}\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} disabled={!apiToken}>\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nApiTokenDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  oldApiToken: PropTypes.string,\r\n  open: PropTypes.bool,\r\n  mandatory: PropTypes.bool\r\n};\r\n\r\nApiTokenDialog.defaultProps = {\r\n  oldApiToken: '',\r\n  open: true,\r\n  mandatory: false\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(ApiTokenDialog);\r\n","import moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst Duration = props => {\r\n  const { duration, useColors, textProps } = props;\r\n\r\n  const sign = duration === 0 ? '' : duration > 0 ? '+' : '-';\r\n  const durationObj = moment.duration(Math.abs(duration), 'seconds');\r\n  const durationFormatted = `${Math.floor(durationObj.asHours())}:${durationObj\r\n    .minutes()\r\n    .toString()\r\n    .padStart(2, '0')}`;\r\n  if (useColors) {\r\n    textProps.color = duration < 0 ? 'error' : 'primary';\r\n  }\r\n\r\n  return (\r\n    <Typography {...textProps}>\r\n      {sign}\r\n      {durationFormatted}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nDuration.propTypes = {\r\n  duration: PropTypes.number.isRequired,\r\n  useColors: PropTypes.bool,\r\n  textProps: PropTypes.object\r\n};\r\n\r\nDuration.defaultProps = {\r\n  useColors: false,\r\n  textProps: {}\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(Duration);\r\n","import Icon from '@material-ui/core/Icon';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    color: red[500],\r\n    marginLeft: theme.spacing.unit * 2,\r\n    verticalAlign: 'top',\r\n    animation: 'blinker 2s cubic-bezier(0.46, 0.03, 0.52, 0.96) infinite'\r\n  }\r\n});\r\n\r\nconst RunningEntryIndicator = props => {\r\n  const { size, visible, classes } = props;\r\n  return visible ? (\r\n    <Tooltip title=\"You have a running time entry\" placement=\"top\">\r\n      <Icon fontSize={size} className={classes.root}>\r\n        fiber_manual_record\r\n      </Icon>\r\n    </Tooltip>\r\n  ) : null;\r\n};\r\n\r\nRunningEntryIndicator.propTypes = {\r\n  size: PropTypes.oneOf(['default', 'small', 'large']),\r\n  visible: PropTypes.bool\r\n};\r\n\r\nRunningEntryIndicator.defaultProps = {\r\n  size: 'default',\r\n  visible: true\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(RunningEntryIndicator);\r\n","import React from 'react';\r\n\r\nexport const TimeEntryContext = React.createContext({\r\n  timeEntriesByDate: {},\r\n  workdayOverrides: {},\r\n  toggleWorkday: () => {}\r\n});\r\n","import moment from 'moment';\r\n\r\nconst BASE_URL = 'https://www.toggl.com/api/v8/time_entries';\r\n\r\nconst workdayDuration = moment.duration('7:30').asSeconds();\r\n\r\nfunction groupEntries(startDate, endDate, timeEntries, workdayOverrides) {\r\n  const timeEntriesByDate = timeEntries\r\n    .map(entry =>\r\n      Object.assign(entry, {\r\n        start: moment(entry.start),\r\n        end: moment(entry.end),\r\n        duration: entry.duration < 0 ? moment().unix() + entry.duration : entry.duration,\r\n        isRunning: entry.duration < 0\r\n      })\r\n    )\r\n    .sort((a, b) => a.start.diff(b.start))\r\n    .reduce((result, entry) => {\r\n      const date = moment(entry.start).format('YYYY-MM-DD');\r\n      const dataForDate = result[date] || {\r\n        timeEntries: [],\r\n        duration: timeEntryStore.isWorkday(date, workdayOverrides, true) ? -workdayDuration : 0,\r\n        hasRunningEntry: false\r\n      };\r\n      dataForDate.timeEntries.push(entry);\r\n      dataForDate.duration += entry.duration;\r\n      dataForDate.hasRunningEntry = dataForDate.hasRunningEntry || entry.isRunning;\r\n\r\n      return Object.assign(result, { [date]: dataForDate });\r\n    }, {});\r\n\r\n  let date = startDate;\r\n  while (date.isBefore(endDate, 'day')) {\r\n    const dateString = date.format('YYYY-MM-DD');\r\n    if (!timeEntriesByDate.hasOwnProperty(dateString)) {\r\n      timeEntriesByDate[dateString] = {\r\n        timeEntries: [],\r\n        duration: timeEntryStore.isWorkday(dateString, workdayOverrides, false) ? -workdayDuration : null,\r\n        hasRunningEntry: false\r\n      };\r\n    }\r\n\r\n    date = date.add(1, 'day');\r\n  }\r\n\r\n  return timeEntriesByDate;\r\n}\r\n\r\nexport const timeEntryStore = {\r\n  fetchTimeEntries(startDate, endDate, apiToken, workdaySettings) {\r\n    if (!startDate && !endDate) {\r\n      throw Error('Either start date or end date is required');\r\n    } else if (!apiToken) {\r\n      throw Error('API token is required');\r\n    }\r\n\r\n    const start = !startDate ? null : moment(startDate).startOf('day');\r\n    const end = !endDate ? null : moment(endDate).add(1, 'day').startOf('day');\r\n    if ((start && !start.isValid()) || (end && !end.isValid())) {\r\n      throw Error('Start date and/or end date were invalid');\r\n    }\r\n\r\n    const url = new URL(BASE_URL);\r\n    const params = {};\r\n    if (start) {\r\n      params.start_date = start.toISOString();\r\n    }\r\n    if (end) {\r\n      params.end_date = end.toISOString();\r\n    }\r\n    url.search = new URLSearchParams(params);\r\n\r\n    return fetch(url, {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        Authorization: `Basic ${btoa(`${apiToken}:api_token`)}`,\r\n        'Content-Type': 'application/json'\r\n      })\r\n    })\r\n      .catch(() => {\r\n        throw Error('Failed to fetch time entries, check your internet connection');\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        if (response.status === 403) {\r\n          throw Error('Toggl authentication failed, maybe the API token is incorrect?');\r\n        }\r\n        throw Error(`Toggl responded with an unknown error (HTTP ${response.status})`);\r\n      })\r\n      .then(timeEntries => groupEntries(start, end, timeEntries, workdaySettings));\r\n  },\r\n\r\n  refreshDurations(timeEntriesByDate = {}, workdayOverrides = {}) {\r\n    const refreshed = {};\r\n\r\n    Object.entries(timeEntriesByDate).forEach(([date, dataForDate]) => {\r\n      const hasTimeEntries = dataForDate.timeEntries.length > 0;\r\n      const isWorkday = this.isWorkday(date, workdayOverrides, hasTimeEntries);\r\n      let duration = null;\r\n      if (hasTimeEntries || isWorkday) {\r\n        const baseDuration = dataForDate.timeEntries.map(entry => entry.duration).reduce((a, b) => a + b, 0);\r\n        duration = baseDuration + (isWorkday ? -workdayDuration : 0);\r\n      }\r\n      refreshed[date] = Object.assign({}, dataForDate, { duration });\r\n    });\r\n\r\n    return refreshed;\r\n  },\r\n\r\n  isWorkday(date, workdayOverrides = {}, hasTimeEntries = false) {\r\n    if (workdayOverrides.hasOwnProperty(date)) {\r\n      return workdayOverrides[date];\r\n    }\r\n    if ([6, 7].includes(moment(date).isoWeekday())) {\r\n      return false;\r\n    }\r\n\r\n    return hasTimeEntries;\r\n  }\r\n};\r\n","import classNames from 'classnames';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Duration from './Duration';\r\nimport RunningEntryIndicator from './RunningEntryIndicator';\r\nimport { TimeEntryContext } from './TimeEntryContext';\r\nimport { timeEntryStore } from './TimeEntryStore';\r\n\r\nconst styles = theme => ({\r\n  calendarCell: {\r\n    padding: 10,\r\n    height: '100%'\r\n  },\r\n  disabled: {\r\n    backgroundColor: theme.palette.action.disabledBackground\r\n  },\r\n  dayOfMonth: {\r\n    padding: 3\r\n  },\r\n  today: {\r\n    borderRadius: '50%',\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n    fontWeight: theme.typography.fontWeightMedium\r\n  }\r\n});\r\n\r\nconst CalendarCell = props => {\r\n  const { date, duration, hasRunningEntry, disabled, classes } = props;\r\n  const isCurrentDate = moment().isSame(date, 'day');\r\n  const hasDuration = Number.isSafeInteger(duration);\r\n\r\n  return (\r\n    <TimeEntryContext.Consumer>\r\n      {({ workdayOverrides, toggleWorkday }) => (\r\n        <Paper className={classNames(classes.calendarCell, { [classes.disabled]: disabled })}>\r\n          <Typography\r\n            variant=\"overline\"\r\n            inline\r\n            gutterBottom\r\n            className={classNames(classes.dayOfMonth, { [classes.today]: isCurrentDate })}\r\n          >\r\n            {moment(date).format('DD')}\r\n          </Typography>\r\n          <RunningEntryIndicator size=\"small\" visible={hasRunningEntry} />\r\n          {!disabled && (\r\n            <Switch\r\n              checked={timeEntryStore.isWorkday(date, workdayOverrides, hasDuration)}\r\n              onChange={() => toggleWorkday(date)}\r\n              color=\"primary\"\r\n            />\r\n          )}\r\n          {hasDuration && (\r\n            <Duration\r\n              duration={duration}\r\n              useColors\r\n              textProps={{\r\n                variant: 'h6',\r\n                align: 'center'\r\n              }}\r\n            />\r\n          )}\r\n          {!disabled && !hasDuration && (\r\n            <Typography variant=\"h6\" color=\"textSecondary\" align=\"center\">\r\n              -\r\n            </Typography>\r\n          )}\r\n        </Paper>\r\n      )}\r\n    </TimeEntryContext.Consumer>\r\n  );\r\n};\r\n\r\nCalendarCell.propTypes = {\r\n  date: PropTypes.string.isRequired,\r\n  duration: PropTypes.number,\r\n  hasRunningEntry: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nCalendarCell.defaultProps = {\r\n  duration: null,\r\n  hasRunningEntry: false,\r\n  disabled: false\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CalendarCell);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport CalendarCell from './CalendarCell';\r\n\r\nfunction getDurationData(timeEntriesByDate, fromDate, toDate) {\r\n  const durationData = {};\r\n  let date = moment(fromDate);\r\n  while (date.isSameOrBefore(toDate, 'day')) {\r\n    const dateString = date.format('YYYY-MM-DD');\r\n    durationData[dateString] = Object.assign(\r\n      {\r\n        duration: null,\r\n        hasRunningEntry: false\r\n      },\r\n      timeEntriesByDate[dateString]\r\n    );\r\n    date = date.add(1, 'day');\r\n  }\r\n\r\n  return durationData;\r\n}\r\n\r\nconst CalendarGrid = props => {\r\n  const { year, month, timeEntriesByDate } = props;\r\n\r\n  const firstDayOfMonth = moment({ year, month: month - 1, day: 1 });\r\n  const firstVisibleDay = moment(firstDayOfMonth).startOf('week');\r\n  const lastDayOfMonth = moment(firstDayOfMonth).endOf('month').startOf('day');\r\n  const lastVisibleDay = moment(lastDayOfMonth).endOf('week').startOf('day');\r\n\r\n  const dates = [];\r\n  const weeks = [];\r\n  const gridCellCount = Math.round(moment.duration(lastVisibleDay.diff(firstVisibleDay)).asDays()) + 1;\r\n  while (dates.length < gridCellCount) {\r\n    dates.push(\r\n      moment(firstVisibleDay)\r\n        .add(dates.length, 'days')\r\n        .format('YYYY-MM-DD')\r\n    );\r\n  }\r\n  while (dates.length > 0) {\r\n    weeks.push(dates.splice(0, 7));\r\n  }\r\n\r\n  const durationData = getDurationData(timeEntriesByDate, firstVisibleDay, lastVisibleDay);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {weeks.map(week => (\r\n        <Grid container spacing={16} key={moment(week[0]).week()}>\r\n          {week.map(date => (\r\n            <Grid item xs key={date}>\r\n              <CalendarCell\r\n                date={date}\r\n                duration={durationData[date].duration}\r\n                hasRunningEntry={durationData[date].hasRunningEntry}\r\n                disabled={!firstDayOfMonth.isSame(date, 'month')}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nCalendarGrid.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  month: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).isRequired,\r\n  timeEntriesByDate: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(CalendarGrid);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Duration from './Duration';\r\nimport CalendarGrid from './CalendarGrid';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 10\r\n  }\r\n});\r\n\r\nfunction getTimeEntriesForMonth(timeEntriesByDate, month) {\r\n  return Object.keys(timeEntriesByDate)\r\n    .filter(date => moment(date).month() === month)\r\n    .reduce((result, date) => Object.assign(result, { [date]: timeEntriesByDate[date] }), {});\r\n}\r\n\r\nfunction getDataByMonth(startDate, endDate, timeEntriesByDate) {\r\n  const dataByMonth = [];\r\n  let firstDayOfMonth = moment(startDate).startOf('month');\r\n  while (firstDayOfMonth.isSameOrBefore(endDate, 'day')) {\r\n    const timeEntriesForMonth = getTimeEntriesForMonth(timeEntriesByDate, firstDayOfMonth.month());\r\n    dataByMonth.push({\r\n      firstDayOfMonth,\r\n      totalDiff: Object.values(timeEntriesForMonth).reduce((result, data) => result + data.duration, 0)\r\n    });\r\n    firstDayOfMonth = moment(firstDayOfMonth).add(1, 'month');\r\n  }\r\n\r\n  return dataByMonth;\r\n}\r\n\r\nconst CalendarGridContainer = props => {\r\n  const { startDate, endDate, timeEntriesByDate, classes } = props;\r\n  if (startDate.isAfter(endDate)) {\r\n    return null;\r\n  }\r\n\r\n  const dataByMonth = getDataByMonth(startDate, endDate, timeEntriesByDate);\r\n\r\n  return (\r\n    <Grid container justify=\"center\" spacing={40} className={classes.root}>\r\n      {dataByMonth.map(({ firstDayOfMonth, totalDiff }) => (\r\n        <Grid item xs={12} lg={6} key={firstDayOfMonth.format('YYYY-MM')}>\r\n          <Grid container justify=\"space-between\">\r\n            <Grid item>\r\n              <Typography variant=\"h2\" gutterBottom>\r\n                {firstDayOfMonth.format('MMMM YYYY')}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Duration\r\n                duration={totalDiff}\r\n                useColors\r\n                textProps={{\r\n                  variant: 'h2',\r\n                  gutterBottom: true\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <CalendarGrid\r\n            year={firstDayOfMonth.year()}\r\n            month={firstDayOfMonth.month() + 1}\r\n            timeEntriesByDate={getTimeEntriesForMonth(timeEntriesByDate, firstDayOfMonth.month())}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCalendarGridContainer.propTypes = {\r\n  startDate: PropTypes.instanceOf(moment).isRequired,\r\n  endDate: PropTypes.instanceOf(moment).isRequired,\r\n  timeEntriesByDate: PropTypes.object.isRequired,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CalendarGridContainer);\r\n","import Button from '@material-ui/core/Button';\r\nimport { DatePicker } from 'material-ui-pickers';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 5\r\n  },\r\n  quickSelections: {\r\n    marginTop: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nconst quickSelections = [\r\n  {\r\n    title: 'Last month',\r\n    getDateRange: () => ({\r\n      startDate: moment()\r\n        .subtract(1, 'month')\r\n        .startOf('month'),\r\n      endDate: moment()\r\n        .startOf('month')\r\n        .subtract(1, 'day')\r\n    })\r\n  },\r\n  {\r\n    title: 'This month',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('month'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    }),\r\n    default: true\r\n  },\r\n  {\r\n    title: 'This year',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('year'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    })\r\n  }\r\n];\r\n\r\nconst DateRangeSelector = props => {\r\n  const { startDate, endDate, onChange, classes } = props;\r\n  const currentYear = moment().year();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Grid container justify=\"space-evenly\" spacing={40}>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"From\"\r\n            format={startDate && startDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={startDate}\r\n            maxDate={endDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate: date,\r\n                endDate\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"To\"\r\n            format={endDate && endDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={endDate}\r\n            minDate={startDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate,\r\n                endDate: date\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"space-evenly\" spacing={40} className={classes.quickSelections}>\r\n        {quickSelections.map(selection => (\r\n          <Grid item key={selection.title}>\r\n            <Button onClick={() => onChange(selection.getDateRange())} size=\"small\">\r\n              {selection.title}\r\n            </Button>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nDateRangeSelector.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  startDate: PropTypes.instanceOf(moment),\r\n  endDate: PropTypes.instanceOf(moment)\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(DateRangeSelector);\r\n\r\nexport const defaultDateRange = quickSelections.find(selection => selection.default).getDateRange();\r\n","import Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport SnackbarContent from '@material-ui/core/es/SnackbarContent/SnackbarContent';\r\nimport Typography from '@material-ui/core/es/Typography/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ApiTokenDialog from './ApiTokenDialog';\r\nimport CalendarGridContainer from './CalendarGridContainer';\r\nimport DateRangeSelector, { defaultDateRange } from './DateRangeSelector';\r\nimport { timeEntryStore } from './TimeEntryStore';\r\nimport Duration from './Duration';\r\nimport RunningEntryIndicator from './RunningEntryIndicator';\r\nimport { TimeEntryContext } from './TimeEntryContext';\r\nimport './styles.css';\r\n\r\nconst styles = theme => ({\r\n  changeApiToken: {\r\n    position: 'absolute',\r\n    top: theme.spacing.unit * 2,\r\n    right: theme.spacing.unit * 2\r\n  },\r\n  dateSelectorContainer: {\r\n    marginTop: theme.spacing.unit * 5\r\n  },\r\n  totalTimeDiff: {\r\n    marginTop: theme.spacing.unit * 3\r\n  },\r\n  errorNotification: {\r\n    marginTop: theme.spacing.unit * 3,\r\n    backgroundColor: theme.palette.error.main\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { apiToken, startDate, endDate, workdayOverrides: workdayOverridesString } = localStorage;\r\n    let workdayOverrides = {};\r\n    try {\r\n      if (workdayOverridesString) {\r\n        workdayOverrides = JSON.parse(workdayOverridesString);\r\n      }\r\n    } catch (e) {\r\n      console.warn(`Couldn't parse workday overrides from localStorage: ${workdayOverridesString}`);\r\n      workdayOverrides = {};\r\n    }\r\n    const dateRange =\r\n      startDate && endDate ? { startDate: moment(startDate), endDate: moment(endDate) } : defaultDateRange;\r\n\r\n    this.handleDialogClose = this.handleDialogClose.bind(this);\r\n    this.handleDateRangeChange = this.handleDateRangeChange.bind(this);\r\n    this.toggleWorkday = this.toggleWorkday.bind(this);\r\n\r\n    this.state = {\r\n      apiToken,\r\n      showApiTokenDialog: !apiToken,\r\n      startDate: dateRange.startDate,\r\n      endDate: dateRange.endDate,\r\n      timeEntryContext: { timeEntriesByDate: {}, workdayOverrides, toggleWorkday: this.toggleWorkday }\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { apiToken } = this.state;\r\n    if (apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { startDate, endDate, apiToken } = this.state;\r\n    if (prevState.startDate !== startDate || prevState.endDate !== endDate || prevState.apiToken !== apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  toggleWorkday(date) {\r\n    const {\r\n      timeEntryContext,\r\n      timeEntryContext: { workdayOverrides, timeEntriesByDate }\r\n    } = this.state;\r\n\r\n    const oldSetting = timeEntryStore.isWorkday(date, workdayOverrides, timeEntriesByDate[date].timeEntries.length > 0);\r\n    const newWorkdayOverrides = Object.assign({}, workdayOverrides, { [date]: !oldSetting });\r\n    const refreshedTimeEntries = timeEntryStore.refreshDurations(timeEntriesByDate, newWorkdayOverrides);\r\n\r\n    localStorage.setItem('workdayOverrides', JSON.stringify(newWorkdayOverrides));\r\n    this.setState({\r\n      timeEntryContext: Object.assign({}, timeEntryContext, {\r\n        timeEntriesByDate: refreshedTimeEntries,\r\n        workdayOverrides: newWorkdayOverrides\r\n      })\r\n    });\r\n  }\r\n\r\n  updateTimeEntries() {\r\n    const { startDate, endDate, apiToken, timeEntryContext } = this.state;\r\n    try {\r\n      timeEntryStore.fetchTimeEntries(startDate, endDate, apiToken, timeEntryContext.workdayOverrides).then(\r\n        result =>\r\n          this.setState({\r\n            timeEntryContext: Object.assign({}, timeEntryContext, { timeEntriesByDate: result }),\r\n            error: undefined\r\n          }),\r\n        error =>\r\n          this.setState({\r\n            timeEntryContext: Object.assign({}, timeEntryContext, { timeEntriesByDate: {} }),\r\n            error: error.message\r\n          })\r\n      );\r\n    } catch ({ message }) {\r\n      this.setState({ error: message });\r\n    }\r\n  }\r\n\r\n  handleDialogClose({ apiToken, rememberMe }) {\r\n    const stateChange = { showApiTokenDialog: false };\r\n    if (apiToken) {\r\n      if (rememberMe) {\r\n        localStorage.setItem('apiToken', apiToken);\r\n      } else {\r\n        localStorage.removeItem('apiToken');\r\n      }\r\n      Object.assign(stateChange, { apiToken });\r\n    }\r\n    this.setState(stateChange);\r\n  }\r\n\r\n  handleDateRangeChange(dateRange) {\r\n    Object.keys(dateRange).forEach(key => localStorage.setItem(key, dateRange[key].format('YYYY-MM-DD')));\r\n    this.setState(dateRange);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      startDate,\r\n      endDate,\r\n      apiToken,\r\n      showApiTokenDialog,\r\n      timeEntryContext,\r\n      timeEntryContext: { timeEntriesByDate },\r\n      error\r\n    } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    if (!apiToken) {\r\n      return <ApiTokenDialog mandatory onClose={this.handleDialogClose} />;\r\n    }\r\n\r\n    const totalTimeDiff = Object.values(timeEntriesByDate).reduce((sum, entry) => sum + entry.duration, 0);\r\n    const isTrackingOngoing = Object.values(timeEntriesByDate).some(entry => entry.hasRunningEntry);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <ApiTokenDialog\r\n          open={showApiTokenDialog}\r\n          mandatory={false}\r\n          oldApiToken={apiToken}\r\n          onClose={this.handleDialogClose}\r\n        />\r\n        <Button\r\n          className={classes.changeApiToken}\r\n          color=\"primary\"\r\n          onClick={() => this.setState({ showApiTokenDialog: true })}\r\n        >\r\n          Change API Token\r\n        </Button>\r\n        <Grid container justify=\"center\" className={classes.dateSelectorContainer}>\r\n          <Grid item>\r\n            <DateRangeSelector startDate={startDate} endDate={endDate} onChange={this.handleDateRangeChange} />\r\n          </Grid>\r\n          {!startDate.isSame(endDate, 'month') && (\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h2\" align=\"center\" className={classes.totalTimeDiff}>\r\n                Total: <Duration duration={totalTimeDiff} useColors textProps={{ variant: 'inherit', inline: true }} />\r\n                <RunningEntryIndicator size=\"large\" visible={isTrackingOngoing} />\r\n              </Typography>\r\n            </Grid>\r\n          )}\r\n          {error && (\r\n            <Grid item>\r\n              <SnackbarContent className={classes.errorNotification} message={error} />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n        {Object.keys(timeEntriesByDate).length > 0 && (\r\n          <TimeEntryContext.Provider value={timeEntryContext}>\r\n            <CalendarGridContainer startDate={startDate} endDate={endDate} timeEntriesByDate={timeEntriesByDate} />\r\n          </TimeEntryContext.Provider>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(App);\r\n","import './bootstrap';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\nimport 'moment/locale/en-gb';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nmoment.locale('en-gb');\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  }\r\n});\r\n\r\nconst root = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <App />\r\n    </MuiPickersUtilsProvider>\r\n  </ThemeProvider>\r\n);\r\n\r\nReactDOM.render(root(), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}