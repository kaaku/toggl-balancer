{"version":3,"sources":["bootstrap.js","serviceWorker.js","ApiTokenDialog.jsx","Duration.jsx","RunningEntryIndicator.jsx","CalendarCell.jsx","CalendarGrid.jsx","CalendarGridContainer.jsx","DateRangeSelector.jsx","TimeEntryStore.jsx","App.jsx","index.jsx"],"names":["install","Boolean","window","location","hostname","match","ApiTokenDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","apiToken","oldApiToken","rememberMe","handleChange","bind","assertThisInitialized","handleSubmit","handleCancel","event","setState","target","value","onClose","_this$state","_this2","_this$props","open","mandatory","_this$state2","react_default","a","createElement","Dialog_default","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","href","rel","Icon_default","fontSize","TextField_default","type","autoFocus","fullWidth","margin","label","onChange","FormControlLabel_default","control","Checkbox_default","color","checked","e","DialogActions_default","Button_default","onClick","variant","disabled","Component","defaultProps","withStyles","withTheme","Duration","duration","useColors","textProps","sign","durationObj","moment","Math","abs","durationFormatted","concat","floor","asHours","minutes","toString","padStart","Typography_default","RunningEntryIndicator","size","visible","classes","Tooltip_default","title","placement","className","root","theme","red","marginLeft","spacing","unit","verticalAlign","animation","CalendarCell","date","hasRunningEntry","isCurrentDate","isSame","Paper_default","classNames","calendarCell","defineProperty","inline","gutterBottom","dayOfMonth","today","format","src_RunningEntryIndicator","Number","isSafeInteger","src_Duration","align","padding","height","backgroundColor","palette","action","disabledBackground","borderRadius","primary","main","contrastText","fontWeight","typography","fontWeightMedium","year","month","timeEntriesByDate","firstDayOfMonth","day","firstVisibleDay","startOf","lastDayOfMonth","endOf","lastVisibleDay","dates","weeks","gridCellCount","round","diff","asDays","length","push","add","splice","durationData","fromDate","toDate","isSameOrBefore","dateString","assign","getDurationData","Fragment","map","week","Grid_default","container","key","item","xs","src_CalendarCell","getTimeEntriesForMonth","keys","filter","reduce","result","startDate","endDate","isAfter","dataByMonth","timeEntriesForMonth","totalDiff","values","data","getDataByMonth","justify","_ref","lg","src_CalendarGrid","quickSelections","getDateRange","subtract","default","src_DateRangeSelector","marginTop","currentYear","material_ui_pickers_esm","maxDate","autoOk","showTodayButton","minDate","selection","defaultDateRange","find","workDayDuration","asSeconds","groupEntries","timeEntries","entry","start","end","unix","isRunning","sort","b","dataForDate","TimeEntryStore","Error","isValid","url","URL","params","start_date","toISOString","end_date","search","URLSearchParams","fetch","method","headers","Headers","Authorization","btoa","Content-Type","catch","then","response","ok","json","status","App","_localStorage","localStorage","dateRange","showApiTokenDialog","handleDialogClose","handleDateRangeChange","updateTimeEntries","prevProps","prevState","error","undefined","message","_ref2","stateChange","setItem","removeItem","forEach","_this3","_this$state3","src_ApiTokenDialog","totalTimeDiff","sum","isTrackingOngoing","some","changeApiToken","dateSelectorContainer","Typography","SnackbarContent","errorNotification","src_CalendarGridContainer","position","top","right","locale","createMuiTheme","useNextVariants","ReactDOM","render","index_es","CssBaseline_default","utils","MomentUtils","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74ca13ce.chunk.js","sourcesContent":["import { install } from '@material-ui/styles';\r\n\r\ninstall();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nclass ApiTokenDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiToken: props.oldApiToken,\r\n      rememberMe: true\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ apiToken: event.target.value });\r\n  }\r\n\r\n  handleSubmit() {\r\n    const { onClose } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n    onClose({ apiToken, rememberMe });\r\n  }\r\n\r\n  handleCancel() {\r\n    const { onClose } = this.props;\r\n    onClose({});\r\n  }\r\n\r\n  render() {\r\n    const { open, mandatory } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        disableBackdropClick={mandatory}\r\n        disableEscapeKeyDown={mandatory}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Enter your Toggl API Token</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Your Toggl time entries will be fetched using your API Token, which you can find from your{' '}\r\n            <a href=\"https://www.toggl.com/app/profile\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Toggl profile <Icon fontSize=\"small\">open_in_new</Icon>\r\n            </a>\r\n          </DialogContentText>\r\n          <TextField\r\n            type=\"password\"\r\n            autoFocus\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"API Token\"\r\n            value={apiToken}\r\n            onChange={this.handleChange}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                checked={rememberMe}\r\n                onChange={(e, checked) => this.setState({ rememberMe: checked })}\r\n              />\r\n            }\r\n            label=\"Remember me\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {!mandatory && (\r\n            <Button color=\"primary\" onClick={this.handleCancel}>\r\n              Cancel\r\n            </Button>\r\n          )}\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} disabled={!apiToken}>\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nApiTokenDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  oldApiToken: PropTypes.string,\r\n  open: PropTypes.bool,\r\n  mandatory: PropTypes.bool\r\n};\r\n\r\nApiTokenDialog.defaultProps = {\r\n  oldApiToken: '',\r\n  open: true,\r\n  mandatory: false\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(ApiTokenDialog);\r\n","import moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst Duration = props => {\r\n  const { duration, useColors, textProps } = props;\r\n\r\n  const sign = duration === 0 ? '' : duration > 0 ? '+' : '-';\r\n  const durationObj = moment.duration(Math.abs(duration), 'seconds');\r\n  const durationFormatted = `${Math.floor(durationObj.asHours())}:${durationObj\r\n    .minutes()\r\n    .toString()\r\n    .padStart(2, '0')}`;\r\n  if (useColors) {\r\n    textProps.color = duration < 0 ? 'error' : 'primary';\r\n  }\r\n\r\n  return (\r\n    <Typography {...textProps}>\r\n      {sign}\r\n      {durationFormatted}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nDuration.propTypes = {\r\n  duration: PropTypes.number.isRequired,\r\n  useColors: PropTypes.bool,\r\n  textProps: PropTypes.object\r\n};\r\n\r\nDuration.defaultProps = {\r\n  useColors: false,\r\n  textProps: {}\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(Duration);\r\n","import Icon from '@material-ui/core/Icon';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    color: red[500],\r\n    marginLeft: theme.spacing.unit * 2,\r\n    verticalAlign: 'top',\r\n    animation: 'blinker 2s cubic-bezier(0.46, 0.03, 0.52, 0.96) infinite'\r\n  }\r\n});\r\n\r\nconst RunningEntryIndicator = props => {\r\n  const { size, visible, classes } = props;\r\n  return visible ? (\r\n    <Tooltip title=\"You have a running time entry\" placement=\"top\">\r\n      <Icon fontSize={size} className={classes.root}>\r\n        fiber_manual_record\r\n      </Icon>\r\n    </Tooltip>\r\n  ) : null;\r\n};\r\n\r\nRunningEntryIndicator.propTypes = {\r\n  size: PropTypes.oneOf(['default', 'small', 'large']),\r\n  visible: PropTypes.bool\r\n};\r\n\r\nRunningEntryIndicator.defaultProps = {\r\n  size: 'default',\r\n  visible: true\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(RunningEntryIndicator);\r\n","import classNames from 'classnames';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Duration from './Duration';\r\nimport RunningEntryIndicator from './RunningEntryIndicator';\r\n\r\nconst styles = theme => ({\r\n  calendarCell: {\r\n    padding: 10,\r\n    height: '100%'\r\n  },\r\n  disabled: {\r\n    backgroundColor: theme.palette.action.disabledBackground\r\n  },\r\n  dayOfMonth: {\r\n    padding: 3\r\n  },\r\n  today: {\r\n    borderRadius: '50%',\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.primary.contrastText,\r\n    fontWeight: theme.typography.fontWeightMedium\r\n  }\r\n});\r\n\r\nconst CalendarCell = props => {\r\n  const { date, duration, hasRunningEntry, disabled, classes } = props;\r\n  const isCurrentDate = moment().isSame(date, 'day');\r\n\r\n  return (\r\n    <Paper className={classNames(classes.calendarCell, { [classes.disabled]: disabled })}>\r\n      <Typography\r\n        variant=\"overline\"\r\n        inline\r\n        gutterBottom\r\n        className={classNames(classes.dayOfMonth, { [classes.today]: isCurrentDate })}\r\n      >\r\n        {moment(date).format('DD')}\r\n      </Typography>\r\n      <RunningEntryIndicator size=\"small\" visible={hasRunningEntry} />\r\n      {Number.isSafeInteger(duration) && (\r\n        <Duration\r\n          duration={duration}\r\n          useColors\r\n          textProps={{\r\n            variant: 'h6',\r\n            align: 'center'\r\n          }}\r\n        />\r\n      )}\r\n      {!disabled && !Number.isSafeInteger(duration) && (\r\n        <Typography variant=\"h6\" color=\"textSecondary\" align=\"center\">\r\n          -\r\n        </Typography>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nCalendarCell.propTypes = {\r\n  date: PropTypes.string.isRequired,\r\n  duration: PropTypes.number,\r\n  hasRunningEntry: PropTypes.bool,\r\n  disabled: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nCalendarCell.defaultProps = {\r\n  duration: null,\r\n  hasRunningEntry: false,\r\n  disabled: false\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CalendarCell);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport CalendarCell from './CalendarCell';\r\n\r\nfunction getDurationData(timeEntriesByDate, fromDate, toDate) {\r\n  const durationData = {};\r\n  let date = moment(fromDate);\r\n  while (date.isSameOrBefore(toDate, 'day')) {\r\n    const dateString = date.format('YYYY-MM-DD');\r\n    durationData[dateString] = Object.assign(\r\n      {\r\n        duration: null,\r\n        hasRunningEntry: false\r\n      },\r\n      timeEntriesByDate[dateString]\r\n    );\r\n    date = date.add(1, 'day');\r\n  }\r\n\r\n  return durationData;\r\n}\r\n\r\nconst CalendarGrid = props => {\r\n  const { year, month, timeEntriesByDate } = props;\r\n\r\n  const firstDayOfMonth = moment({ year, month: month - 1, day: 1 });\r\n  const firstVisibleDay = moment(firstDayOfMonth).startOf('week');\r\n  const lastDayOfMonth = moment(firstDayOfMonth).endOf('month').startOf('day');\r\n  const lastVisibleDay = moment(lastDayOfMonth).endOf('week').startOf('day');\r\n\r\n  const dates = [];\r\n  const weeks = [];\r\n  const gridCellCount = Math.round(moment.duration(lastVisibleDay.diff(firstVisibleDay)).asDays()) + 1;\r\n  while (dates.length < gridCellCount) {\r\n    dates.push(\r\n      moment(firstVisibleDay)\r\n        .add(dates.length, 'days')\r\n        .format('YYYY-MM-DD')\r\n    );\r\n  }\r\n  while (dates.length > 0) {\r\n    weeks.push(dates.splice(0, 7));\r\n  }\r\n\r\n  const durationData = getDurationData(timeEntriesByDate, firstVisibleDay, lastVisibleDay);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {weeks.map(week => (\r\n        <Grid container spacing={16} key={moment(week[0]).week()}>\r\n          {week.map(date => (\r\n            <Grid item xs key={date}>\r\n              <CalendarCell\r\n                date={date}\r\n                duration={durationData[date].duration}\r\n                hasRunningEntry={durationData[date].hasRunningEntry}\r\n                disabled={!firstDayOfMonth.isSame(date, 'month')}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nCalendarGrid.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  month: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).isRequired,\r\n  timeEntriesByDate: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(CalendarGrid);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Duration from './Duration';\r\nimport CalendarGrid from './CalendarGrid';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 10\r\n  }\r\n});\r\n\r\nfunction getTimeEntriesForMonth(timeEntriesByDate, month) {\r\n  return Object.keys(timeEntriesByDate)\r\n    .filter(date => moment(date).month() === month)\r\n    .reduce((result, date) => Object.assign(result, { [date]: timeEntriesByDate[date] }), {});\r\n}\r\n\r\nfunction getDataByMonth(startDate, endDate, timeEntriesByDate) {\r\n  const dataByMonth = [];\r\n  let firstDayOfMonth = moment(startDate).startOf('month');\r\n  while (firstDayOfMonth.isSameOrBefore(endDate, 'day')) {\r\n    const timeEntriesForMonth = getTimeEntriesForMonth(timeEntriesByDate, firstDayOfMonth.month());\r\n    dataByMonth.push({\r\n      firstDayOfMonth,\r\n      totalDiff: Object.values(timeEntriesForMonth).reduce((result, data) => result + data.duration, 0)\r\n    });\r\n    firstDayOfMonth = moment(firstDayOfMonth).add(1, 'month');\r\n  }\r\n\r\n  return dataByMonth;\r\n}\r\n\r\nconst CalendarGridContainer = props => {\r\n  const { startDate, endDate, timeEntriesByDate, classes } = props;\r\n  if (startDate.isAfter(endDate)) {\r\n    return null;\r\n  }\r\n\r\n  const dataByMonth = getDataByMonth(startDate, endDate, timeEntriesByDate);\r\n\r\n  return (\r\n    <Grid container justify=\"center\" spacing={40} className={classes.root}>\r\n      {dataByMonth.map(({ firstDayOfMonth, totalDiff }) => (\r\n        <Grid item xs={12} lg={6} key={firstDayOfMonth.format('YYYY-MM')}>\r\n          <Grid container justify=\"space-between\">\r\n            <Grid item>\r\n              <Typography variant=\"h2\" gutterBottom>\r\n                {firstDayOfMonth.format('MMMM YYYY')}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Duration\r\n                duration={totalDiff}\r\n                useColors\r\n                textProps={{\r\n                  variant: 'h2',\r\n                  gutterBottom: true\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <CalendarGrid\r\n            year={firstDayOfMonth.year()}\r\n            month={firstDayOfMonth.month() + 1}\r\n            timeEntriesByDate={getTimeEntriesForMonth(timeEntriesByDate, firstDayOfMonth.month())}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCalendarGridContainer.propTypes = {\r\n  startDate: PropTypes.instanceOf(moment).isRequired,\r\n  endDate: PropTypes.instanceOf(moment).isRequired,\r\n  timeEntriesByDate: PropTypes.object.isRequired,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CalendarGridContainer);\r\n","import Button from '@material-ui/core/Button';\r\nimport { DatePicker } from 'material-ui-pickers';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 5\r\n  },\r\n  quickSelections: {\r\n    marginTop: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nconst quickSelections = [\r\n  {\r\n    title: 'Last month',\r\n    getDateRange: () => ({\r\n      startDate: moment()\r\n        .subtract(1, 'month')\r\n        .startOf('month'),\r\n      endDate: moment()\r\n        .startOf('month')\r\n        .subtract(1, 'day')\r\n    })\r\n  },\r\n  {\r\n    title: 'This month',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('month'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    }),\r\n    default: true\r\n  },\r\n  {\r\n    title: 'This year',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('year'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    })\r\n  }\r\n];\r\n\r\nconst DateRangeSelector = props => {\r\n  const { startDate, endDate, onChange, classes } = props;\r\n  const currentYear = moment().year();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Grid container justify=\"space-evenly\" spacing={40}>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"From\"\r\n            format={startDate && startDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={startDate}\r\n            maxDate={endDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate: date,\r\n                endDate\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"To\"\r\n            format={endDate && endDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={endDate}\r\n            minDate={startDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate,\r\n                endDate: date\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"space-evenly\" spacing={40} className={classes.quickSelections}>\r\n        {quickSelections.map(selection => (\r\n          <Grid item key={selection.title}>\r\n            <Button onClick={() => onChange(selection.getDateRange())} size=\"small\">\r\n              {selection.title}\r\n            </Button>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nDateRangeSelector.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  startDate: PropTypes.instanceOf(moment),\r\n  endDate: PropTypes.instanceOf(moment)\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(DateRangeSelector);\r\n\r\nexport const defaultDateRange = quickSelections.find(selection => selection.default).getDateRange();\r\n","import moment from 'moment';\r\n\r\nconst BASE_URL = 'https://www.toggl.com/api/v8/time_entries';\r\n\r\nconst workDayDuration = moment.duration('7:30').asSeconds();\r\n\r\nfunction groupEntries(timeEntries) {\r\n  return timeEntries\r\n    .map(entry =>\r\n      Object.assign(entry, {\r\n        start: moment(entry.start),\r\n        end: moment(entry.end),\r\n        duration: entry.duration < 0 ? moment().unix() + entry.duration : entry.duration,\r\n        isRunning: entry.duration < 0\r\n      })\r\n    )\r\n    .sort((a, b) => a.start.diff(b.start))\r\n    .reduce((result, entry) => {\r\n      const date = moment(entry.start).format('YYYY-MM-DD');\r\n      const dataForDate = result[date] || { timeEntries: [], duration: -workDayDuration, hasRunningEntry: false };\r\n      dataForDate.timeEntries.push(entry);\r\n      dataForDate.duration += entry.duration;\r\n      dataForDate.hasRunningEntry = dataForDate.hasRunningEntry || entry.isRunning;\r\n\r\n      return Object.assign(result, { [date]: dataForDate });\r\n    }, {});\r\n}\r\n\r\nexport default {\r\n  fetchTimeEntries(startDate, endDate, apiToken) {\r\n    if (!startDate && !endDate) {\r\n      throw Error('Either start date or end date is required');\r\n    } else if (!apiToken) {\r\n      throw Error('API token is required');\r\n    }\r\n\r\n    const start = !startDate ? null : moment(startDate).startOf('day');\r\n    const end = !endDate ? null : moment(endDate).add(1, 'day').startOf('day');\r\n    if ((start && !start.isValid()) || (end && !end.isValid())) {\r\n      throw Error('Start date and/or end date were invalid');\r\n    }\r\n\r\n    const url = new URL(BASE_URL);\r\n    const params = {};\r\n    if (start) {\r\n      params.start_date = start.toISOString();\r\n    }\r\n    if (end) {\r\n      params.end_date = end.toISOString();\r\n    }\r\n    url.search = new URLSearchParams(params);\r\n\r\n    return fetch(url, {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        Authorization: `Basic ${btoa(`${apiToken}:api_token`)}`,\r\n        'Content-Type': 'application/json'\r\n      })\r\n    })\r\n      .catch(() => {\r\n        throw Error('Failed to fetch time entries, check your internet connection');\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        if (response.status === 403) {\r\n          throw Error('Toggl authentication failed, maybe the API token is incorrect?');\r\n        }\r\n        throw Error(`Toggl responded with an unknown error (HTTP ${response.status})`);\r\n      })\r\n      .then(groupEntries);\r\n  }\r\n};\r\n","import Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport SnackbarContent from '@material-ui/core/es/SnackbarContent/SnackbarContent';\r\nimport Typography from '@material-ui/core/es/Typography/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ApiTokenDialog from './ApiTokenDialog';\r\nimport CalendarGridContainer from './CalendarGridContainer';\r\nimport DateRangeSelector, { defaultDateRange } from './DateRangeSelector';\r\nimport TimeEntryStore from './TimeEntryStore';\r\nimport Duration from './Duration';\r\nimport RunningEntryIndicator from './RunningEntryIndicator';\r\nimport './styles.css';\r\n\r\nconst styles = theme => ({\r\n  changeApiToken: {\r\n    position: 'absolute',\r\n    top: theme.spacing.unit * 2,\r\n    right: theme.spacing.unit * 2\r\n  },\r\n  dateSelectorContainer: {\r\n    marginTop: theme.spacing.unit * 5\r\n  },\r\n  totalTimeDiff: {\r\n    marginTop: theme.spacing.unit * 3\r\n  },\r\n  errorNotification: {\r\n    marginTop: theme.spacing.unit * 3,\r\n    backgroundColor: theme.palette.error.main\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { apiToken, startDate, endDate } = localStorage;\r\n    const dateRange =\r\n      startDate && endDate ? { startDate: moment(startDate), endDate: moment(endDate) } : defaultDateRange;\r\n    this.state = Object.assign({ apiToken, timeEntriesByDate: {}, showApiTokenDialog: !apiToken }, dateRange);\r\n\r\n    this.handleDialogClose = this.handleDialogClose.bind(this);\r\n    this.handleDateRangeChange = this.handleDateRangeChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { apiToken } = this.state;\r\n    if (apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { startDate, endDate, apiToken } = this.state;\r\n    if (prevState.startDate !== startDate || prevState.endDate !== endDate || prevState.apiToken !== apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  updateTimeEntries() {\r\n    const { startDate, endDate, apiToken } = this.state;\r\n    try {\r\n      TimeEntryStore.fetchTimeEntries(startDate, endDate, apiToken).then(\r\n        result => this.setState({ timeEntriesByDate: result, error: undefined }),\r\n        error => this.setState({ timeEntriesByDate: {}, error: error.message })\r\n      );\r\n    } catch ({ message }) {\r\n      this.setState({ error: message });\r\n    }\r\n  }\r\n\r\n  handleDialogClose({ apiToken, rememberMe }) {\r\n    const stateChange = { showApiTokenDialog: false };\r\n    if (apiToken) {\r\n      if (rememberMe) {\r\n        localStorage.setItem('apiToken', apiToken);\r\n      } else {\r\n        localStorage.removeItem('apiToken');\r\n      }\r\n      Object.assign(stateChange, { apiToken });\r\n    }\r\n    this.setState(stateChange);\r\n  }\r\n\r\n  handleDateRangeChange(dateRange) {\r\n    Object.keys(dateRange).forEach(key => localStorage.setItem(key, dateRange[key].format('YYYY-MM-DD')));\r\n    this.setState(dateRange);\r\n  }\r\n\r\n  render() {\r\n    const { startDate, endDate, apiToken, showApiTokenDialog, timeEntriesByDate, error } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    if (!apiToken) {\r\n      return <ApiTokenDialog mandatory onClose={this.handleDialogClose} />;\r\n    }\r\n\r\n    const totalTimeDiff = Object.values(timeEntriesByDate).reduce((sum, entry) => sum + entry.duration, 0);\r\n    const isTrackingOngoing = Object.values(timeEntriesByDate).some(entry => entry.hasRunningEntry);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <ApiTokenDialog\r\n          open={showApiTokenDialog}\r\n          mandatory={false}\r\n          oldApiToken={apiToken}\r\n          onClose={this.handleDialogClose}\r\n        />\r\n        <Button\r\n          className={classes.changeApiToken}\r\n          color=\"primary\"\r\n          onClick={() => this.setState({ showApiTokenDialog: true })}\r\n        >\r\n          Change API Token\r\n        </Button>\r\n        <Grid container justify=\"center\" className={classes.dateSelectorContainer}>\r\n          <Grid item>\r\n            <DateRangeSelector startDate={startDate} endDate={endDate} onChange={this.handleDateRangeChange} />\r\n          </Grid>\r\n          {!startDate.isSame(endDate, 'month') && (\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h2\" align=\"center\" className={classes.totalTimeDiff}>\r\n                Total: <Duration duration={totalTimeDiff} useColors textProps={{ variant: 'inherit', inline: true }} />\r\n                <RunningEntryIndicator size=\"large\" visible={isTrackingOngoing} />\r\n              </Typography>\r\n            </Grid>\r\n          )}\r\n          {error && (\r\n            <Grid item>\r\n              <SnackbarContent className={classes.errorNotification} message={error} />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n        {Object.keys(timeEntriesByDate).length > 0 && (\r\n          <CalendarGridContainer startDate={startDate} endDate={endDate} timeEntriesByDate={timeEntriesByDate} />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(App);\r\n","import './bootstrap';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\nimport 'moment/locale/en-gb';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nmoment.locale('en-gb');\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  }\r\n});\r\n\r\nconst root = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <App />\r\n    </MuiPickersUtilsProvider>\r\n  </ThemeProvider>\r\n);\r\n\r\nReactDOM.render(root(), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}