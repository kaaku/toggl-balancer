{"version":3,"sources":["bootstrap.js","serviceWorker.js","ApiTokenDialog.jsx","Duration.jsx","MonthView.jsx","CalendarGrid.jsx","DateRangeSelector.jsx","TimeEntryStore.jsx","RunningEntryIndicator.jsx","App.jsx","index.jsx"],"names":["install","Boolean","window","location","hostname","match","ApiTokenDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","apiToken","oldApiToken","rememberMe","handleChange","bind","assertThisInitialized","handleSubmit","handleCancel","event","setState","target","value","onClose","_this$state","_this2","_this$props","open","mandatory","_this$state2","react_default","a","createElement","Dialog_default","disableBackdropClick","disableEscapeKeyDown","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","href","rel","Icon_default","fontSize","TextField_default","type","autoFocus","fullWidth","margin","label","onChange","FormControlLabel_default","control","Checkbox_default","color","checked","e","DialogActions_default","Button_default","onClick","variant","disabled","Component","defaultProps","withStyles","withTheme","Duration","duration","useColors","textProps","sign","durationObj","moment","Math","abs","durationFormatted","concat","floor","asHours","minutes","toString","padStart","Typography_default","theme","calendarCell","padding","height","backgroundColor","palette","grey","year","month","data","defaultContent","classes","firstDayOfMonth","day","firstVisibleDay","startOf","lastDayOfMonth","endOf","lastVisibleDay","dates","weeks","gridCellCount","round","diff","asDays","length","push","add","format","splice","Fragment","map","week","Grid_default","container","spacing","key","date","item","xs","Paper_default","className","classNames","defineProperty","gutterBottom","getTimeEntriesForMonth","timeEntriesByDate","keys","filter","reduce","result","assign","getMonthViewData","apply","toConsumableArray","src_Duration","align","root","unit","startDate","endDate","isAfter","dataByMonth","isBefore","timeEntriesForMonth","totalDiff","values","monthViewData","justify","_ref2","lg","src_MonthView","quickSelections","title","getDateRange","subtract","default","src_DateRangeSelector","marginTop","currentYear","material_ui_pickers_esm","maxDate","autoOk","showTodayButton","minDate","selection","size","defaultDateRange","find","workDayDuration","asSeconds","groupEntries","timeEntries","entry","start","end","unix","isRunning","sort","b","dataForDate","hasRunningEntry","TimeEntryStore","Error","isValid","url","URL","params","start_date","toISOString","end_date","search","URLSearchParams","fetch","method","headers","Headers","Authorization","btoa","Content-Type","catch","then","response","ok","json","status","RunningEntryIndicator","visible","Tooltip_default","placement","red","marginLeft","verticalAlign","animation","App","_localStorage","localStorage","dateRange","showApiTokenDialog","handleDialogClose","handleDateRangeChange","updateTimeEntries","prevProps","prevState","error","undefined","message","_ref","stateChange","setItem","removeItem","forEach","_this3","_this$state3","src_ApiTokenDialog","totalTimeDiff","sum","isTrackingOngoing","some","changeApiToken","dateSelectorContainer","isSame","Typography","inline","src_RunningEntryIndicator","SnackbarContent","errorNotification","src_CalendarGrid","position","top","right","main","locale","createMuiTheme","typography","useNextVariants","ReactDOM","render","index_es","CssBaseline_default","utils","MomentUtils","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94b3c119.chunk.js","sourcesContent":["import { install } from '@material-ui/styles';\r\n\r\ninstall();\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nclass ApiTokenDialog extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      apiToken: props.oldApiToken,\r\n      rememberMe: true\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ apiToken: event.target.value });\r\n  }\r\n\r\n  handleSubmit() {\r\n    const { onClose } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n    onClose({ apiToken, rememberMe });\r\n  }\r\n\r\n  handleCancel() {\r\n    const { onClose } = this.props;\r\n    onClose({});\r\n  }\r\n\r\n  render() {\r\n    const { open, mandatory } = this.props;\r\n    const { apiToken, rememberMe } = this.state;\r\n\r\n    return (\r\n      <Dialog\r\n        open={open}\r\n        disableBackdropClick={mandatory}\r\n        disableEscapeKeyDown={mandatory}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"form-dialog-title\">Enter your Toggl API Token</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            Your Toggl time entries will be fetched using your API Token, which you can find from your{' '}\r\n            <a href=\"https://www.toggl.com/app/profile\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Toggl profile <Icon fontSize=\"small\">open_in_new</Icon>\r\n            </a>\r\n          </DialogContentText>\r\n          <TextField\r\n            type=\"password\"\r\n            autoFocus\r\n            fullWidth\r\n            margin=\"dense\"\r\n            label=\"API Token\"\r\n            value={apiToken}\r\n            onChange={this.handleChange}\r\n          />\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                checked={rememberMe}\r\n                onChange={(e, checked) => this.setState({ rememberMe: checked })}\r\n              />\r\n            }\r\n            label=\"Remember me\"\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {!mandatory && (\r\n            <Button color=\"primary\" onClick={this.handleCancel}>\r\n              Cancel\r\n            </Button>\r\n          )}\r\n          <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit} disabled={!apiToken}>\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nApiTokenDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  oldApiToken: PropTypes.string,\r\n  open: PropTypes.bool,\r\n  mandatory: PropTypes.bool\r\n};\r\n\r\nApiTokenDialog.defaultProps = {\r\n  oldApiToken: '',\r\n  open: true,\r\n  mandatory: false\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(ApiTokenDialog);\r\n","import moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst Duration = props => {\r\n  const { duration, useColors, textProps } = props;\r\n\r\n  const sign = duration === 0 ? '' : duration > 0 ? '+' : '-';\r\n  const durationObj = moment.duration(Math.abs(duration), 'seconds');\r\n  const durationFormatted = `${Math.floor(durationObj.asHours())}:${durationObj\r\n    .minutes()\r\n    .toString()\r\n    .padStart(2, '0')}`;\r\n  if (useColors) {\r\n    textProps.color = duration < 0 ? 'error' : 'primary';\r\n  }\r\n\r\n  return (\r\n    <Typography {...textProps}>\r\n      {sign}\r\n      {durationFormatted}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nDuration.propTypes = {\r\n  duration: PropTypes.number.isRequired,\r\n  useColors: PropTypes.bool,\r\n  textProps: PropTypes.object\r\n};\r\n\r\nDuration.defaultProps = {\r\n  useColors: false,\r\n  textProps: {}\r\n};\r\n\r\nexport default withStyles({}, { withTheme: true })(Duration);\r\n","import classNames from 'classnames';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  calendarCell: {\r\n    padding: 10,\r\n    height: '100%'\r\n  },\r\n  disabled: {\r\n    backgroundColor: theme.palette.grey[200]\r\n  }\r\n});\r\n\r\nconst MonthView = props => {\r\n  const { year, month, data, defaultContent, classes } = props;\r\n\r\n  const firstDayOfMonth = moment({ year, month: month - 1, day: 1 });\r\n  const firstVisibleDay = moment(firstDayOfMonth).startOf('week');\r\n  const lastDayOfMonth = moment(firstDayOfMonth)\r\n    .endOf('month')\r\n    .startOf('day');\r\n  const lastVisibleDay = moment(lastDayOfMonth)\r\n    .endOf('week')\r\n    .startOf('day');\r\n\r\n  const dates = [];\r\n  const weeks = [];\r\n  const gridCellCount = Math.round(moment.duration(lastVisibleDay.diff(firstVisibleDay)).asDays()) + 1;\r\n  while (dates.length < gridCellCount) {\r\n    dates.push(\r\n      moment(firstVisibleDay)\r\n        .add(dates.length, 'days')\r\n        .format('YYYY-MM-DD')\r\n    );\r\n  }\r\n  while (dates.length > 0) {\r\n    weeks.push(dates.splice(0, 7));\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {weeks.map(week => (\r\n        <Grid container spacing={16} key={moment(week[0]).week()}>\r\n          {week.map(date => (\r\n            <Grid item xs key={date}>\r\n              <Paper\r\n                className={classNames(classes.calendarCell, { [classes.disabled]: moment(date).month() + 1 !== month })}\r\n              >\r\n                <Typography variant=\"overline\" gutterBottom>\r\n                  {moment(date).format('DD')}\r\n                </Typography>\r\n                {data[date] && data[date]}\r\n                {!data[date] && moment(date).month() + 1 === month && defaultContent}\r\n              </Paper>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nMonthView.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  month: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).isRequired,\r\n  data: PropTypes.shape({\r\n    date: PropTypes.element\r\n  }).isRequired,\r\n  defaultContent: PropTypes.element\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(MonthView);\r\n","import Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport Duration from './Duration';\r\nimport MonthView from './MonthView';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 10\r\n  }\r\n});\r\n\r\nfunction getTimeEntriesForMonth(timeEntriesByDate, month) {\r\n  return Object.keys(timeEntriesByDate)\r\n    .filter(date => moment(date).month() === month)\r\n    .reduce((result, date) => Object.assign(result, { [date]: timeEntriesByDate[date] }), {});\r\n}\r\n\r\nfunction toCalendarCellComponent(data) {\r\n  return (\r\n    <Duration\r\n      duration={data.duration}\r\n      useColors\r\n      textProps={{\r\n        variant: 'h6',\r\n        align: 'center'\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\n/**\r\n * @param timeEntriesByDate {Object}\r\n */\r\nfunction getMonthViewData(timeEntriesByDate) {\r\n  return Object.assign(\r\n    {},\r\n    ...Object.keys(timeEntriesByDate).map(date => ({ [date]: toCalendarCellComponent(timeEntriesByDate[date]) }))\r\n  );\r\n}\r\n\r\nfunction getDefaultCellContent() {\r\n  return (\r\n    <Typography variant=\"h6\" color=\"textSecondary\" align=\"center\">\r\n      -\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst CalendarGrid = props => {\r\n  const { startDate, endDate, timeEntriesByDate, classes } = props;\r\n  if (startDate.isAfter(endDate)) {\r\n    return;\r\n  }\r\n\r\n  const dataByMonth = [];\r\n  let firstDayOfMonth = moment(startDate).startOf('month');\r\n  while (firstDayOfMonth.isBefore(endDate)) {\r\n    const timeEntriesForMonth = getTimeEntriesForMonth(timeEntriesByDate, firstDayOfMonth.month());\r\n    dataByMonth.push({\r\n      firstDayOfMonth,\r\n      totalDiff: Object.values(timeEntriesForMonth).reduce((result, data) => result + data.duration, 0),\r\n      monthViewData: getMonthViewData(timeEntriesForMonth)\r\n    });\r\n    firstDayOfMonth = moment(firstDayOfMonth).add(1, 'month');\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"center\" spacing={40} className={classes.root}>\r\n      {dataByMonth.map(({ firstDayOfMonth, totalDiff, monthViewData }) => (\r\n        <Grid item xs={12} lg={6} key={firstDayOfMonth.format('YYYY-MM')}>\r\n          <Grid container justify=\"space-between\">\r\n            <Grid item>\r\n              <Typography variant=\"h2\" gutterBottom>\r\n                {firstDayOfMonth.format('MMMM YYYY')}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Duration\r\n                duration={totalDiff}\r\n                useColors\r\n                textProps={{\r\n                  variant: 'h2',\r\n                  gutterBottom: true\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <MonthView\r\n            year={firstDayOfMonth.year()}\r\n            month={firstDayOfMonth.month() + 1}\r\n            data={monthViewData}\r\n            defaultContent={getDefaultCellContent()}\r\n          />\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCalendarGrid.propTypes = {\r\n  startDate: PropTypes.instanceOf(moment).isRequired,\r\n  endDate: PropTypes.instanceOf(moment).isRequired,\r\n  timeEntriesByDate: PropTypes.object.isRequired,\r\n  classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(CalendarGrid);\r\n","import Button from '@material-ui/core/Button';\r\nimport { DatePicker } from 'material-ui-pickers';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    padding: theme.spacing.unit * 5\r\n  },\r\n  quickSelections: {\r\n    marginTop: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nconst quickSelections = [\r\n  {\r\n    title: 'Last month',\r\n    getDateRange: () => ({\r\n      startDate: moment()\r\n        .subtract(1, 'month')\r\n        .startOf('month'),\r\n      endDate: moment()\r\n        .startOf('month')\r\n        .subtract(1, 'day')\r\n    })\r\n  },\r\n  {\r\n    title: 'This month',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('month'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    }),\r\n    default: true\r\n  },\r\n  {\r\n    title: 'This year',\r\n    getDateRange: () => ({\r\n      startDate: moment().startOf('year'),\r\n      endDate: moment()\r\n        .endOf('month')\r\n        .startOf('day')\r\n    })\r\n  }\r\n];\r\n\r\nconst DateRangeSelector = props => {\r\n  const { startDate, endDate, onChange, classes } = props;\r\n  const currentYear = moment().year();\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Grid container justify=\"space-evenly\" spacing={40}>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"From\"\r\n            format={startDate && startDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={startDate}\r\n            maxDate={endDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate: date,\r\n                endDate\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <DatePicker\r\n            label=\"To\"\r\n            format={endDate && endDate.year() !== currentYear ? 'MMMM Do, YYYY' : 'MMMM Do'}\r\n            value={endDate}\r\n            minDate={startDate}\r\n            autoOk\r\n            showTodayButton\r\n            onChange={date =>\r\n              onChange({\r\n                startDate,\r\n                endDate: date\r\n              })\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid container justify=\"space-evenly\" spacing={40} className={classes.quickSelections}>\r\n        {quickSelections.map(selection => (\r\n          <Grid item key={selection.title}>\r\n            <Button onClick={() => onChange(selection.getDateRange())} size=\"small\">\r\n              {selection.title}\r\n            </Button>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nDateRangeSelector.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  startDate: PropTypes.instanceOf(moment),\r\n  endDate: PropTypes.instanceOf(moment)\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(DateRangeSelector);\r\n\r\nexport const defaultDateRange = quickSelections.find(selection => selection.default).getDateRange();\r\n","import moment from 'moment';\r\n\r\nconst BASE_URL = 'https://www.toggl.com/api/v8/time_entries';\r\n\r\nconst workDayDuration = moment.duration('7:30').asSeconds();\r\n\r\nfunction groupEntries(timeEntries) {\r\n  return timeEntries\r\n    .map(entry =>\r\n      Object.assign(entry, {\r\n        start: moment(entry.start),\r\n        end: moment(entry.end),\r\n        duration: entry.duration < 0 ? moment().unix() + entry.duration : entry.duration,\r\n        isRunning: entry.duration < 0\r\n      })\r\n    )\r\n    .sort((a, b) => a.start.diff(b.start))\r\n    .reduce((result, entry) => {\r\n      const date = moment(entry.start).format('YYYY-MM-DD');\r\n      const dataForDate = result[date] || { timeEntries: [], duration: -workDayDuration, hasRunningEntry: false };\r\n      dataForDate.timeEntries.push(entry);\r\n      dataForDate.duration += entry.duration;\r\n      dataForDate.hasRunningEntry = dataForDate.hasRunningEntry || entry.isRunning;\r\n\r\n      return Object.assign(result, { [date]: dataForDate });\r\n    }, {});\r\n}\r\n\r\nexport default {\r\n  fetchTimeEntries(startDate, endDate, apiToken) {\r\n    if (!startDate && !endDate) {\r\n      throw Error('Either start date or end date is required');\r\n    } else if (!apiToken) {\r\n      throw Error('API token is required');\r\n    }\r\n\r\n    const start = !startDate ? null : moment(startDate).startOf('day');\r\n    const end = !endDate ? null : moment(endDate).add(1, 'day').startOf('day');\r\n    if ((start && !start.isValid()) || (end && !end.isValid())) {\r\n      throw Error('Start date and/or end date were invalid');\r\n    }\r\n\r\n    const url = new URL(BASE_URL);\r\n    const params = {};\r\n    if (start) {\r\n      params.start_date = start.toISOString();\r\n    }\r\n    if (end) {\r\n      params.end_date = end.toISOString();\r\n    }\r\n    url.search = new URLSearchParams(params);\r\n\r\n    return fetch(url, {\r\n      method: 'GET',\r\n      headers: new Headers({\r\n        Authorization: `Basic ${btoa(`${apiToken}:api_token`)}`,\r\n        'Content-Type': 'application/json'\r\n      })\r\n    })\r\n      .catch(() => {\r\n        throw Error('Failed to fetch time entries, check your internet connection');\r\n      })\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n        if (response.status === 403) {\r\n          throw Error('Toggl authentication failed, maybe the API token is incorrect?');\r\n        }\r\n        throw Error(`Toggl responded with an unknown error (HTTP ${response.status})`);\r\n      })\r\n      .then(groupEntries);\r\n  }\r\n};\r\n","import Icon from '@material-ui/core/Icon';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    color: red[500],\r\n    marginLeft: theme.spacing.unit * 2,\r\n    verticalAlign: 'top',\r\n    animation: 'blinker 2s cubic-bezier(0.46, 0.03, 0.52, 0.96) infinite'\r\n  }\r\n});\r\n\r\nconst RunningEntryIndicator = props => {\r\n  const { size, visible, classes } = props;\r\n  return visible ? (\r\n    <Tooltip title=\"You have a running time entry\" placement=\"top\">\r\n      <Icon fontSize={size} className={classes.root}>\r\n        fiber_manual_record\r\n      </Icon>\r\n    </Tooltip>\r\n  ) : null;\r\n};\r\n\r\nRunningEntryIndicator.propTypes = {\r\n  size: PropTypes.oneOf(['default', 'small', 'large']),\r\n  visible: PropTypes.bool\r\n};\r\n\r\nRunningEntryIndicator.defaultProps = {\r\n  size: 'default',\r\n  visible: true\r\n};\r\n\r\nexport default withStyles(styles, { withTheme: true })(RunningEntryIndicator);\r\n","import Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from 'moment';\r\nimport React, { Component } from 'react';\r\nimport SnackbarContent from '@material-ui/core/es/SnackbarContent/SnackbarContent';\r\nimport Typography from '@material-ui/core/es/Typography/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport ApiTokenDialog from './ApiTokenDialog';\r\nimport CalendarGrid from './CalendarGrid';\r\nimport DateRangeSelector, { defaultDateRange } from './DateRangeSelector';\r\nimport TimeEntryStore from './TimeEntryStore';\r\nimport Duration from './Duration';\r\nimport RunningEntryIndicator from './RunningEntryIndicator';\r\nimport './styles.css';\r\n\r\nconst styles = theme => ({\r\n  changeApiToken: {\r\n    position: 'absolute',\r\n    top: theme.spacing.unit * 2,\r\n    right: theme.spacing.unit * 2\r\n  },\r\n  dateSelectorContainer: {\r\n    marginTop: theme.spacing.unit * 5\r\n  },\r\n  totalTimeDiff: {\r\n    marginTop: theme.spacing.unit * 3\r\n  },\r\n  errorNotification: {\r\n    marginTop: theme.spacing.unit * 3,\r\n    backgroundColor: theme.palette.error.main\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { apiToken, startDate, endDate } = localStorage;\r\n    const dateRange =\r\n      startDate && endDate ? { startDate: moment(startDate), endDate: moment(endDate) } : defaultDateRange;\r\n    this.state = Object.assign({ apiToken, timeEntriesByDate: {}, showApiTokenDialog: !apiToken }, dateRange);\r\n\r\n    this.handleDialogClose = this.handleDialogClose.bind(this);\r\n    this.handleDateRangeChange = this.handleDateRangeChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { apiToken } = this.state;\r\n    if (apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { startDate, endDate, apiToken } = this.state;\r\n    if (prevState.startDate !== startDate || prevState.endDate !== endDate || prevState.apiToken !== apiToken) {\r\n      this.updateTimeEntries();\r\n    }\r\n  }\r\n\r\n  updateTimeEntries() {\r\n    const { startDate, endDate, apiToken } = this.state;\r\n    try {\r\n      TimeEntryStore.fetchTimeEntries(startDate, endDate, apiToken).then(\r\n        result => this.setState({ timeEntriesByDate: result, error: undefined }),\r\n        error => this.setState({ timeEntriesByDate: {}, error: error.message })\r\n      );\r\n    } catch ({ message }) {\r\n      this.setState({ error: message });\r\n    }\r\n  }\r\n\r\n  handleDialogClose({ apiToken, rememberMe }) {\r\n    const stateChange = { showApiTokenDialog: false };\r\n    if (apiToken) {\r\n      if (rememberMe) {\r\n        localStorage.setItem('apiToken', apiToken);\r\n      } else {\r\n        localStorage.removeItem('apiToken');\r\n      }\r\n      Object.assign(stateChange, { apiToken });\r\n    }\r\n    this.setState(stateChange);\r\n  }\r\n\r\n  handleDateRangeChange(dateRange) {\r\n    Object.keys(dateRange).forEach(key => localStorage.setItem(key, dateRange[key].format('YYYY-MM-DD')));\r\n    this.setState(dateRange);\r\n  }\r\n\r\n  render() {\r\n    const { startDate, endDate, apiToken, showApiTokenDialog, timeEntriesByDate, error } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    if (!apiToken) {\r\n      return <ApiTokenDialog mandatory onClose={this.handleDialogClose} />;\r\n    }\r\n\r\n    const totalTimeDiff = Object.values(timeEntriesByDate).reduce((sum, entry) => sum + entry.duration, 0);\r\n    const isTrackingOngoing = Object.values(timeEntriesByDate).some(entry => entry.hasRunningEntry);\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <ApiTokenDialog\r\n          open={showApiTokenDialog}\r\n          mandatory={false}\r\n          oldApiToken={apiToken}\r\n          onClose={this.handleDialogClose}\r\n        />\r\n        <Button\r\n          className={classes.changeApiToken}\r\n          color=\"primary\"\r\n          onClick={() => this.setState({ showApiTokenDialog: true })}\r\n        >\r\n          Change API Token\r\n        </Button>\r\n        <Grid container justify=\"center\" className={classes.dateSelectorContainer}>\r\n          <Grid item>\r\n            <DateRangeSelector startDate={startDate} endDate={endDate} onChange={this.handleDateRangeChange} />\r\n          </Grid>\r\n          {!startDate.isSame(endDate, 'month') && (\r\n            <Grid item xs={12}>\r\n              <Typography variant=\"h2\" align=\"center\" className={classes.totalTimeDiff}>\r\n                Total: <Duration duration={totalTimeDiff} useColors textProps={{ variant: 'inherit', inline: true }} />\r\n                <RunningEntryIndicator size=\"large\" visible={isTrackingOngoing} />\r\n              </Typography>\r\n            </Grid>\r\n          )}\r\n          {error && (\r\n            <Grid item>\r\n              <SnackbarContent className={classes.errorNotification} message={error} />\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n        {Object.keys(timeEntriesByDate).length > 0 && (\r\n          <CalendarGrid startDate={startDate} endDate={endDate} timeEntriesByDate={timeEntriesByDate} />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(App);\r\n","import './bootstrap';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport moment from 'moment';\r\nimport 'moment/locale/en-gb';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nmoment.locale('en-gb');\r\n\r\nconst theme = createMuiTheme({\r\n  typography: {\r\n    useNextVariants: true\r\n  }\r\n});\r\n\r\nconst root = () => (\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <App />\r\n    </MuiPickersUtilsProvider>\r\n  </ThemeProvider>\r\n);\r\n\r\nReactDOM.render(root(), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}