{"version":3,"sources":["serviceWorker.js","ApiTokenDialog.js","MonthView.js","Duration.js","CalendarGrid.js","DateRangeSelector.js","TimeEntryStore.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ApiTokenDialog","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","apiToken","handleChange","bind","assertThisInitialized","handleClose","event","setState","target","value","onClose","react_default","a","createElement","Dialog_default","open","disableBackdropClick","mandatory","disableEscapeKeyDown","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","href","rel","Icon_default","fontSize","TextField_default","autoFocus","fullWidth","margin","label","onChange","DialogActions_default","Button_default","color","onClick","disabled","Component","defaultProps","withStyles","withTheme","MonthView","getDataForDate","isIncluded","_this2","_this$props","data","defaultContent","classes","firstDayOfMonth","moment","year","month","day","firstVisibleDay","startOf","lastDayOfMonth","endOf","lastVisibleDay","dates","weeks","gridCellCount","Math","round","duration","diff","asDays","length","push","add","format","splice","Fragment","map","week","Grid_default","container","spacing","key","date","item","xs","Paper_default","className","classNames","calendarCell","defineProperty","Typography_default","variant","gutterBottom","reduce","result","entry","theme","padding","height","backgroundColor","palette","grey","Duration","useColors","textProps","sign","durationObj","abs","durationFormatted","floor","asHours","minutes","toString","padStart","workDayDuration","asSeconds","getTimeDiffsByDate","timeEntries","filter","start","isSame","getMonthViewData","timeDiffsByDate","assign","apply","concat","toConsumableArray","keys","src_Duration","align","root","unit","startDate","endDate","isAfter","dataByMonth","isBefore","totalDiff","values","monthViewData","justify","_ref","lg","src_MonthView","material_ui_pickers_esm","autoOk","disableFuture","clearable","BASE_URL","TimeEntryStore","fetchTimeEntries","Error","end","isValid","url","URL","params","start_date","toISOString","end_date","search","URLSearchParams","fetch","method","headers","Headers","Authorization","btoa","Content-Type","then","res","json","App","_this$state","error","prevProps","prevState","snapshot","_this$state2","updateTimeEntries","_this3","_this$state3","dateSelectorContainer","src_DateRangeSelector","src_CalendarGrid","src_ApiTokenDialog","marginTop","createMuiTheme","typography","useNextVariants","ReactDOM","render","styles","CssBaseline","utils","MomentUtils","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d8252fce.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import PropTypes from 'prop-types';\r\nimport React, {Component} from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nclass ApiTokenDialog extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {apiToken: ''};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleClose = this.handleClose.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({apiToken: event.target.value});\r\n    }\r\n\r\n    handleClose() {\r\n        this.props.onClose(this.state.apiToken);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialog open={this.props.open}\r\n                    disableBackdropClick={this.props.mandatory}\r\n                    disableEscapeKeyDown={this.props.mandatory}\r\n                    aria-labelledby='form-dialog-title'>\r\n                <DialogTitle id='form-dialog-title'>Enter your Toggl API Token</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Your Toggl time entries will be fetched using your API Token, which you can find from your{' '}\r\n                        <a href='https://www.toggl.com/app/profile' target='_blank' rel='noopener noreferrer'>\r\n                            Toggl profile <Icon fontSize='small'>open_in_new</Icon>\r\n                        </a>.\r\n                    </DialogContentText>\r\n                    <TextField autoFocus fullWidth margin='dense' label='API Token' onChange={this.handleChange}/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button color='primary'\r\n                            onClick={this.handleClose}\r\n                            disabled={!this.props.mandatory || !this.state.apiToken}>\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        );\r\n    }\r\n}\r\n\r\nApiTokenDialog.propTypes = {\r\n    onClose: PropTypes.func.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    mandatory: PropTypes.bool\r\n};\r\n\r\nApiTokenDialog.defaultProps = {\r\n    mandatory: false\r\n};\r\n\r\nexport default withStyles({}, {withTheme: true})(ApiTokenDialog);\r\n","import classNames from 'classnames';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport moment from \"moment\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport PropTypes from 'prop-types';\r\nimport React, {Component} from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nconst styles = theme => ({\r\n    calendarCell: {\r\n        padding: 10,\r\n        height: '100%'\r\n    },\r\n    disabled: {\r\n        backgroundColor: theme.palette.grey[200]\r\n    }\r\n});\r\n\r\nclass MonthView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getDataForDate = this.getDataForDate.bind(this);\r\n        this.isIncluded = this.isIncluded.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const {data, defaultContent, classes} = this.props;\r\n\r\n        const firstDayOfMonth = moment({year: this.props.year, month: this.props.month - 1, day: 1});\r\n        const firstVisibleDay = moment(firstDayOfMonth).startOf('week');\r\n        const lastDayOfMonth = moment(firstDayOfMonth).endOf('month').startOf('day');\r\n        const lastVisibleDay = moment(lastDayOfMonth).endOf('week').startOf('day');\r\n\r\n        const dates = [], weeks = [];\r\n        const gridCellCount = Math.round(moment.duration(lastVisibleDay.diff(firstVisibleDay)).asDays()) + 1;\r\n        while (dates.length < gridCellCount) {\r\n            dates.push(moment(firstVisibleDay).add(dates.length, 'days').format('YYYY-MM-DD'));\r\n        }\r\n        while (dates.length > 0) {\r\n            weeks.push(dates.splice(0, 7));\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {weeks.map(week =>\r\n                    <Grid container spacing={16} key={moment(week[0]).week()}>\r\n                        {week.map(date =>\r\n                            <Grid item xs key={date}>\r\n                                <Paper className={classNames(\r\n                                    classes.calendarCell,\r\n                                    {[classes.disabled]: !this.isIncluded(date)}\r\n                                )}>\r\n                                    <Typography variant='overline' gutterBottom>\r\n                                        {moment(date).format('DD')}\r\n                                    </Typography>\r\n                                    {data[date] && data[date]}\r\n                                    {!data[date] && this.isIncluded(date) && defaultContent}\r\n                                </Paper>\r\n                            </Grid>)}\r\n                    </Grid>)\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    isIncluded(date) {\r\n        return moment(date).month() + 1 === this.props.month;\r\n    }\r\n\r\n    getDataForDate(date) {\r\n        return !this.props.data[date] ? '' :\r\n            this.props.data[date].reduce((result, entry) => result + entry.duration, 0);\r\n    }\r\n}\r\n\r\nMonthView.propTypes = {\r\n    year: PropTypes.number.isRequired,\r\n    month: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]).isRequired,\r\n    data: PropTypes.shape({\r\n        date: PropTypes.element\r\n    }).isRequired,\r\n    defaultContent: PropTypes.element\r\n};\r\n\r\nexport default withStyles(styles, {withTheme: true})(MonthView);\r\n","import moment from \"moment\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst Duration = (props) => {\r\n    const {duration, useColors, textProps} = props;\r\n\r\n    const sign = duration === 0 ? '' : (duration > 0 ? '+' : '-');\r\n    const durationObj = moment.duration(Math.abs(duration), 'seconds');\r\n    const durationFormatted = Math.floor(durationObj.asHours()) + ':' +\r\n        durationObj.minutes().toString().padStart(2, '0');\r\n    if (useColors) {\r\n        textProps.color = duration < 0 ? 'error' : 'primary';\r\n    }\r\n\r\n    return (\r\n        <Typography {...textProps}>\r\n            {sign}{durationFormatted}\r\n        </Typography>\r\n    );\r\n};\r\n\r\nDuration.propTypes = {\r\n    duration: PropTypes.number.isRequired,\r\n    useColors: PropTypes.bool,\r\n    textProps: PropTypes.object\r\n};\r\n\r\nDuration.defaultProps = {\r\n    useColors: false,\r\n    textProps: {}\r\n};\r\n\r\nexport default withStyles({}, {withTheme: true})(Duration);","import Grid from \"@material-ui/core/Grid\";\r\nimport moment from \"moment\";\r\nimport MonthView from \"./MonthView\";\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport Duration from \"./Duration\";\r\n\r\nconst workDayDuration = moment.duration('7:30').asSeconds();\r\nconst styles = theme => ({\r\n    root: {\r\n        padding: theme.spacing.unit * 10\r\n    }\r\n});\r\n\r\nconst CalendarGrid = (props) => {\r\n    const {startDate, endDate, timeEntries, classes} = props;\r\n    if (startDate.isAfter(endDate)) {\r\n        return;\r\n    }\r\n\r\n    const dataByMonth = [];\r\n    let firstDayOfMonth = moment(startDate).startOf('month');\r\n    while (firstDayOfMonth.isBefore(endDate)) {\r\n        const timeDiffsByDate = getTimeDiffsByDate(firstDayOfMonth, timeEntries);\r\n        dataByMonth.push({\r\n            firstDayOfMonth: firstDayOfMonth,\r\n            totalDiff: Object.values(timeDiffsByDate).reduce((result, diff) => result + diff, 0),\r\n            monthViewData: getMonthViewData(timeDiffsByDate)\r\n        });\r\n        firstDayOfMonth = moment(firstDayOfMonth).add(1, 'month');\r\n    }\r\n\r\n    return (\r\n        <Grid container justify='center' spacing={40} className={classes.root}>\r\n            {dataByMonth.map(({firstDayOfMonth, totalDiff, monthViewData}) => (\r\n                <Grid item xs={12} lg={6} key={firstDayOfMonth.format('YYYY-MM')}>\r\n                    <Grid container justify='space-between'>\r\n                        <Grid item>\r\n                            <Typography variant='h2' gutterBottom>\r\n                                {firstDayOfMonth.format('MMMM YYYY')}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Duration duration={totalDiff} useColors textProps={{variant: 'h2', gutterBottom: true}}/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <MonthView year={firstDayOfMonth.year()}\r\n                               month={firstDayOfMonth.month() + 1}\r\n                               data={monthViewData}\r\n                               defaultContent={getDefaultCellContent()}/>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};\r\n\r\n/**\r\n * @param month {moment.Moment}\r\n * @param timeEntries {Array}\r\n */\r\nfunction getTimeDiffsByDate(month, timeEntries) {\r\n    return timeEntries\r\n        .filter(entry => moment(entry.start).isSame(month, 'month'))\r\n        .reduce((result, entry) => {\r\n            const date = moment(entry.start).format('YYYY-MM-DD');\r\n            result[date] = (result[date] || -workDayDuration) + entry.duration;\r\n            return result;\r\n        }, {});\r\n}\r\n\r\n/**\r\n * @param timeDiffsByDate {Object}\r\n */\r\nfunction getMonthViewData(timeDiffsByDate) {\r\n    return Object.assign({}, ...Object.keys(timeDiffsByDate)\r\n        .map(date => ({[date]: toCalendarCellComponent(timeDiffsByDate[date])})));\r\n}\r\n\r\n/**\r\n * @param duration {Number}\r\n */\r\nfunction toCalendarCellComponent(duration) {\r\n    return (<Duration duration={duration} useColors textProps={{variant: 'h6', align: 'center'}}/>);\r\n}\r\n\r\nfunction getDefaultCellContent() {\r\n    return (<Typography variant='h6' color='textSecondary' align='center'>-</Typography>);\r\n}\r\n\r\nCalendarGrid.propTypes = {\r\n    startDate: PropTypes.instanceOf(moment).isRequired,\r\n    endDate: PropTypes.instanceOf(moment).isRequired,\r\n    timeEntries: PropTypes.array.isRequired\r\n};\r\n\r\nexport default withStyles(styles, {withTheme: true})(CalendarGrid);\r\n","import {DatePicker} from 'material-ui-pickers';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport moment from \"moment\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        padding: theme.spacing.unit * 4\r\n    }\r\n});\r\n\r\nconst DateRangeSelector = (props) => {\r\n    const {startDate, endDate, onChange, classes} = props;\r\n\r\n    return (\r\n        <Paper className={classes.root}>\r\n            <Grid container justify='space-evenly' spacing={40}>\r\n                <Grid item>\r\n                    <DatePicker value={startDate} label='From' autoOk disableFuture clearable\r\n                                onChange={date => onChange({startDate: date, endDate})}/>\r\n                </Grid>\r\n                <Grid item>\r\n                    <DatePicker value={endDate} label='To' autoOk clearable\r\n                                onChange={date => onChange({startDate, endDate: date})}/>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nDateRangeSelector.propTypes = {\r\n    onChange: PropTypes.func.isRequired,\r\n    startDate: PropTypes.instanceOf(moment),\r\n    endDate: PropTypes.instanceOf(moment)\r\n};\r\n\r\nexport default withStyles(styles, {withTheme: true})(DateRangeSelector);","import moment from \"moment\";\r\n\r\nconst BASE_URL = 'https://www.toggl.com/api/v8/time_entries';\r\n\r\nfunction fetchTimeEntries(startDate, endDate, apiToken) {\r\n    if (!startDate && !endDate) {\r\n        throw Error('Either start date or end date is required');\r\n    } else if (!apiToken) {\r\n        throw Error('API token is required');\r\n    }\r\n\r\n    const start = !startDate ? null : moment(startDate);\r\n    const end = !endDate ? null : moment(endDate).add(1, 'day');\r\n    if ((start && !start.isValid()) || (end && !end.isValid())) {\r\n        throw Error('Start date and/or end date were invalid');\r\n    }\r\n\r\n    const url = new URL(BASE_URL);\r\n    const params = {};\r\n    if (start) {\r\n        params.start_date = start.toISOString();\r\n    }\r\n    if (end) {\r\n        params.end_date = end.toISOString();\r\n    }\r\n    url.search = new URLSearchParams(params);\r\n\r\n    return fetch(url, {\r\n        method: 'GET',\r\n        headers: new Headers({\r\n            'Authorization': 'Basic ' + btoa(`${apiToken}:api_token`),\r\n            'Content-Type': 'application/json'\r\n        })\r\n    }).then(res => res.json());\r\n}\r\n\r\nexport const TimeEntryStore = {fetchTimeEntries};","import Grid from \"@material-ui/core/Grid\";\r\nimport moment from 'moment';\r\nimport React, {Component} from 'react';\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\n\r\nimport ApiTokenDialog from \"./ApiTokenDialog\";\r\nimport CalendarGrid from \"./CalendarGrid\";\r\nimport DateRangeSelector from \"./DateRangeSelector\";\r\nimport {TimeEntryStore} from \"./TimeEntryStore\";\r\n\r\nconst styles = theme => ({\r\n    dateSelectorContainer: {\r\n        marginTop: theme.spacing.unit * 5\r\n    }\r\n});\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiToken: '',\r\n            startDate: moment().startOf('month'),\r\n            endDate: moment().endOf('month').startOf('day'),\r\n            timeEntries: []\r\n        };\r\n    }\r\n\r\n    updateTimeEntries() {\r\n        const {startDate, endDate, apiToken} = this.state;\r\n        TimeEntryStore.fetchTimeEntries(startDate, endDate, apiToken)\r\n            .then(result => this.setState({timeEntries: result}),\r\n                error => this.setState({error: error.toString()}));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {startDate, endDate, apiToken} = this.state;\r\n        if (prevState.startDate !== startDate || prevState.endDate !== endDate || prevState.apiToken !== apiToken) {\r\n            this.updateTimeEntries();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {startDate, endDate, apiToken, timeEntries} = this.state;\r\n        const {classes} = this.props;\r\n\r\n        if (!apiToken) {\r\n            return (<ApiTokenDialog open={!apiToken}\r\n                                    mandatory={!apiToken}\r\n                                    onClose={apiToken => this.setState({apiToken})}/>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <Grid container justify='center' className={classes.dateSelectorContainer}>\r\n                    <Grid item>\r\n                        <DateRangeSelector startDate={startDate}\r\n                                           endDate={endDate}\r\n                                           onChange={({startDate, endDate}) => this.setState({startDate, endDate})}/>\r\n                    </Grid>\r\n                </Grid>\r\n                {timeEntries.length > 0 &&\r\n                <CalendarGrid startDate={startDate} endDate={endDate} timeEntries={timeEntries}/>}\r\n                {this.state.error && <div>{this.state.error}</div>}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles, {withTheme: true})(App);\r\n","import MomentUtils from '@date-io/moment';\r\nimport { MuiPickersUtilsProvider } from 'material-ui-pickers';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\nimport CssBaseline from \"@material-ui/core/es/CssBaseline/CssBaseline\";\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        useNextVariants: true\r\n    }\r\n});\r\n\r\nconst root = () => (\r\n    <MuiThemeProvider theme={theme}>\r\n        <CssBaseline/>\r\n        <MuiPickersUtilsProvider utils={MomentUtils}>\r\n            <App/>\r\n        </MuiPickersUtilsProvider>\r\n    </MuiThemeProvider>\r\n);\r\n\r\nReactDOM.render(root(), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}